/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 1
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the CreateUserHighlightDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserHighlightDto{}

// CreateUserHighlightDto struct for CreateUserHighlightDto
type CreateUserHighlightDto struct {
	// Highlight PR URL
	Url string `json:"url"`
	// Highlight Title
	Title *string `json:"title,omitempty"`
	// Highlight Text
	Highlight string `json:"highlight"`
	// Shipped Date
	ShippedAt *string `json:"shipped_at,omitempty"`
	// Highlight type
	Type string `json:"type"`
	// An array of full-names of tagged repositories
	TaggedRepos []string `json:"taggedRepos"`
}

// NewCreateUserHighlightDto instantiates a new CreateUserHighlightDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserHighlightDto(url string, highlight string, type_ string, taggedRepos []string) *CreateUserHighlightDto {
	this := CreateUserHighlightDto{}
	this.Url = url
	this.Highlight = highlight
	this.Type = type_
	this.TaggedRepos = taggedRepos
	return &this
}

// NewCreateUserHighlightDtoWithDefaults instantiates a new CreateUserHighlightDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserHighlightDtoWithDefaults() *CreateUserHighlightDto {
	this := CreateUserHighlightDto{}
	var type_ string = "pull_request"
	this.Type = type_
	return &this
}

// GetUrl returns the Url field value
func (o *CreateUserHighlightDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateUserHighlightDto) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateUserHighlightDto) SetUrl(v string) {
	o.Url = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *CreateUserHighlightDto) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserHighlightDto) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *CreateUserHighlightDto) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *CreateUserHighlightDto) SetTitle(v string) {
	o.Title = &v
}

// GetHighlight returns the Highlight field value
func (o *CreateUserHighlightDto) GetHighlight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value
// and a boolean to check if the value has been set.
func (o *CreateUserHighlightDto) GetHighlightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Highlight, true
}

// SetHighlight sets field value
func (o *CreateUserHighlightDto) SetHighlight(v string) {
	o.Highlight = v
}

// GetShippedAt returns the ShippedAt field value if set, zero value otherwise.
func (o *CreateUserHighlightDto) GetShippedAt() string {
	if o == nil || IsNil(o.ShippedAt) {
		var ret string
		return ret
	}
	return *o.ShippedAt
}

// GetShippedAtOk returns a tuple with the ShippedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserHighlightDto) GetShippedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ShippedAt) {
		return nil, false
	}
	return o.ShippedAt, true
}

// HasShippedAt returns a boolean if a field has been set.
func (o *CreateUserHighlightDto) HasShippedAt() bool {
	if o != nil && !IsNil(o.ShippedAt) {
		return true
	}

	return false
}

// SetShippedAt gets a reference to the given string and assigns it to the ShippedAt field.
func (o *CreateUserHighlightDto) SetShippedAt(v string) {
	o.ShippedAt = &v
}

// GetType returns the Type field value
func (o *CreateUserHighlightDto) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateUserHighlightDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateUserHighlightDto) SetType(v string) {
	o.Type = v
}

// GetTaggedRepos returns the TaggedRepos field value
func (o *CreateUserHighlightDto) GetTaggedRepos() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TaggedRepos
}

// GetTaggedReposOk returns a tuple with the TaggedRepos field value
// and a boolean to check if the value has been set.
func (o *CreateUserHighlightDto) GetTaggedReposOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaggedRepos, true
}

// SetTaggedRepos sets field value
func (o *CreateUserHighlightDto) SetTaggedRepos(v []string) {
	o.TaggedRepos = v
}

func (o CreateUserHighlightDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserHighlightDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["highlight"] = o.Highlight
	if !IsNil(o.ShippedAt) {
		toSerialize["shipped_at"] = o.ShippedAt
	}
	toSerialize["type"] = o.Type
	toSerialize["taggedRepos"] = o.TaggedRepos
	return toSerialize, nil
}

type NullableCreateUserHighlightDto struct {
	value *CreateUserHighlightDto
	isSet bool
}

func (v NullableCreateUserHighlightDto) Get() *CreateUserHighlightDto {
	return v.value
}

func (v *NullableCreateUserHighlightDto) Set(val *CreateUserHighlightDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserHighlightDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserHighlightDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserHighlightDto(val *CreateUserHighlightDto) *NullableCreateUserHighlightDto {
	return &NullableCreateUserHighlightDto{value: val, isSet: true}
}

func (v NullableCreateUserHighlightDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserHighlightDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
