/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 2
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateUserDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserDto{}

// UpdateUserDto struct for UpdateUserDto
type UpdateUserDto struct {
	// User Profile Name
	Name string `json:"name"`
	// User Profile Email
	Email string `json:"email"`
	// User Profile Bio
	Bio *string `json:"bio,omitempty"`
	// User Profile URL
	Url *string `json:"url,omitempty"`
	// User Profile Twitter Username
	TwitterUsername *string `json:"twitter_username,omitempty"`
	// User Profile Company
	Company *string `json:"company,omitempty"`
	// User Profile Location
	Location *string `json:"location,omitempty"`
	// Display user local time in profile
	DisplayLocalTime *bool `json:"display_local_time,omitempty"`
	// User timezone in UTC
	Timezone *string `json:"timezone,omitempty"`
	// LinkedIn URL
	LinkedinUrl *string `json:"linkedin_url,omitempty"`
	// GitHub Sponsors URL
	GithubSponsorsUrl *string `json:"github_sponsors_url,omitempty"`
	// Discord URL
	DiscordUrl *string `json:"discord_url,omitempty"`
}

// NewUpdateUserDto instantiates a new UpdateUserDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserDto(name string, email string) *UpdateUserDto {
	this := UpdateUserDto{}
	this.Name = name
	this.Email = email
	return &this
}

// NewUpdateUserDtoWithDefaults instantiates a new UpdateUserDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserDtoWithDefaults() *UpdateUserDto {
	this := UpdateUserDto{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateUserDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateUserDto) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *UpdateUserDto) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UpdateUserDto) SetEmail(v string) {
	o.Email = v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *UpdateUserDto) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *UpdateUserDto) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *UpdateUserDto) SetBio(v string) {
	o.Bio = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UpdateUserDto) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateUserDto) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UpdateUserDto) SetUrl(v string) {
	o.Url = &v
}

// GetTwitterUsername returns the TwitterUsername field value if set, zero value otherwise.
func (o *UpdateUserDto) GetTwitterUsername() string {
	if o == nil || IsNil(o.TwitterUsername) {
		var ret string
		return ret
	}
	return *o.TwitterUsername
}

// GetTwitterUsernameOk returns a tuple with the TwitterUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetTwitterUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.TwitterUsername) {
		return nil, false
	}
	return o.TwitterUsername, true
}

// HasTwitterUsername returns a boolean if a field has been set.
func (o *UpdateUserDto) HasTwitterUsername() bool {
	if o != nil && !IsNil(o.TwitterUsername) {
		return true
	}

	return false
}

// SetTwitterUsername gets a reference to the given string and assigns it to the TwitterUsername field.
func (o *UpdateUserDto) SetTwitterUsername(v string) {
	o.TwitterUsername = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *UpdateUserDto) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *UpdateUserDto) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *UpdateUserDto) SetCompany(v string) {
	o.Company = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *UpdateUserDto) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *UpdateUserDto) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *UpdateUserDto) SetLocation(v string) {
	o.Location = &v
}

// GetDisplayLocalTime returns the DisplayLocalTime field value if set, zero value otherwise.
func (o *UpdateUserDto) GetDisplayLocalTime() bool {
	if o == nil || IsNil(o.DisplayLocalTime) {
		var ret bool
		return ret
	}
	return *o.DisplayLocalTime
}

// GetDisplayLocalTimeOk returns a tuple with the DisplayLocalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetDisplayLocalTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayLocalTime) {
		return nil, false
	}
	return o.DisplayLocalTime, true
}

// HasDisplayLocalTime returns a boolean if a field has been set.
func (o *UpdateUserDto) HasDisplayLocalTime() bool {
	if o != nil && !IsNil(o.DisplayLocalTime) {
		return true
	}

	return false
}

// SetDisplayLocalTime gets a reference to the given bool and assigns it to the DisplayLocalTime field.
func (o *UpdateUserDto) SetDisplayLocalTime(v bool) {
	o.DisplayLocalTime = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UpdateUserDto) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UpdateUserDto) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *UpdateUserDto) SetTimezone(v string) {
	o.Timezone = &v
}

// GetLinkedinUrl returns the LinkedinUrl field value if set, zero value otherwise.
func (o *UpdateUserDto) GetLinkedinUrl() string {
	if o == nil || IsNil(o.LinkedinUrl) {
		var ret string
		return ret
	}
	return *o.LinkedinUrl
}

// GetLinkedinUrlOk returns a tuple with the LinkedinUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetLinkedinUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LinkedinUrl) {
		return nil, false
	}
	return o.LinkedinUrl, true
}

// HasLinkedinUrl returns a boolean if a field has been set.
func (o *UpdateUserDto) HasLinkedinUrl() bool {
	if o != nil && !IsNil(o.LinkedinUrl) {
		return true
	}

	return false
}

// SetLinkedinUrl gets a reference to the given string and assigns it to the LinkedinUrl field.
func (o *UpdateUserDto) SetLinkedinUrl(v string) {
	o.LinkedinUrl = &v
}

// GetGithubSponsorsUrl returns the GithubSponsorsUrl field value if set, zero value otherwise.
func (o *UpdateUserDto) GetGithubSponsorsUrl() string {
	if o == nil || IsNil(o.GithubSponsorsUrl) {
		var ret string
		return ret
	}
	return *o.GithubSponsorsUrl
}

// GetGithubSponsorsUrlOk returns a tuple with the GithubSponsorsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetGithubSponsorsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GithubSponsorsUrl) {
		return nil, false
	}
	return o.GithubSponsorsUrl, true
}

// HasGithubSponsorsUrl returns a boolean if a field has been set.
func (o *UpdateUserDto) HasGithubSponsorsUrl() bool {
	if o != nil && !IsNil(o.GithubSponsorsUrl) {
		return true
	}

	return false
}

// SetGithubSponsorsUrl gets a reference to the given string and assigns it to the GithubSponsorsUrl field.
func (o *UpdateUserDto) SetGithubSponsorsUrl(v string) {
	o.GithubSponsorsUrl = &v
}

// GetDiscordUrl returns the DiscordUrl field value if set, zero value otherwise.
func (o *UpdateUserDto) GetDiscordUrl() string {
	if o == nil || IsNil(o.DiscordUrl) {
		var ret string
		return ret
	}
	return *o.DiscordUrl
}

// GetDiscordUrlOk returns a tuple with the DiscordUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserDto) GetDiscordUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DiscordUrl) {
		return nil, false
	}
	return o.DiscordUrl, true
}

// HasDiscordUrl returns a boolean if a field has been set.
func (o *UpdateUserDto) HasDiscordUrl() bool {
	if o != nil && !IsNil(o.DiscordUrl) {
		return true
	}

	return false
}

// SetDiscordUrl gets a reference to the given string and assigns it to the DiscordUrl field.
func (o *UpdateUserDto) SetDiscordUrl(v string) {
	o.DiscordUrl = &v
}

func (o UpdateUserDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.TwitterUsername) {
		toSerialize["twitter_username"] = o.TwitterUsername
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.DisplayLocalTime) {
		toSerialize["display_local_time"] = o.DisplayLocalTime
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.LinkedinUrl) {
		toSerialize["linkedin_url"] = o.LinkedinUrl
	}
	if !IsNil(o.GithubSponsorsUrl) {
		toSerialize["github_sponsors_url"] = o.GithubSponsorsUrl
	}
	if !IsNil(o.DiscordUrl) {
		toSerialize["discord_url"] = o.DiscordUrl
	}
	return toSerialize, nil
}

type NullableUpdateUserDto struct {
	value *UpdateUserDto
	isSet bool
}

func (v NullableUpdateUserDto) Get() *UpdateUserDto {
	return v.value
}

func (v *NullableUpdateUserDto) Set(val *UpdateUserDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserDto(val *UpdateUserDto) *NullableUpdateUserDto {
	return &NullableUpdateUserDto{value: val, isSet: true}
}

func (v NullableUpdateUserDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
