/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 1
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the DbRepo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbRepo{}

// DbRepo struct for DbRepo
type DbRepo struct {
	// Repository identifier
	Id int32 `json:"id"`
	// Owner user identifier
	UserId int32 `json:"user_id"`
	// Total size in bytes
	Size int32 `json:"size"`
	// Total number of issues
	Issues int32 `json:"issues"`
	// Total number of stars
	Stars int32 `json:"stars"`
	// Total number of forks
	Forks int32 `json:"forks"`
	// Total number of watchers
	Watchers int32 `json:"watchers"`
	// Total number of subscribers
	Subscribers int32 `json:"subscribers"`
	// Total number of network usages
	Network int32 `json:"network"`
	// Flag indicating repo is a fork
	IsFork bool `json:"is_fork"`
	// Flag indicating repo is private
	IsPrivate bool `json:"is_private"`
	// Flag indicating repo is a template
	IsTemplate bool `json:"is_template"`
	// Flag indicating repo is archived
	IsArchived bool `json:"is_archived"`
	// Flag indicating repo is disabled
	IsDisabled bool `json:"is_disabled"`
	// Flag indicating repo has issues enabled
	HasIssues bool `json:"has_issues"`
	// Flag indicating repo has projects enabled
	HasProjects bool `json:"has_projects"`
	// Flag indicating repo has downloads enabled
	HasDownloads bool `json:"has_downloads"`
	// Flag indicating repo has wiki enabled
	HasWiki bool `json:"has_wiki"`
	// Flag indicating repo has pages enabled
	HasPages bool `json:"has_pages"`
	// Flag indicating repo has discussions enabled
	HasDiscussions bool `json:"has_discussions"`
	// Timestamp representing repository creation
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Timestamp representing repository last update
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Timestamp representing repository last push
	PushedAt *time.Time `json:"pushed_at,omitempty"`
	// Repository default branch
	DefaultBranch string `json:"default_branch"`
	// Repository GQL node id
	NodeId string `json:"node_id"`
	// Repository git url
	GitUrl string `json:"git_url"`
	// Repository ssh url
	SshUrl string `json:"ssh_url"`
	// Repository clone url
	CloneUrl string `json:"clone_url"`
	// Repository svn url
	SvnUrl string `json:"svn_url"`
	// Repository mirror url
	MirrorUrl *string `json:"mirror_url,omitempty"`
	// Repository unique name
	Name string `json:"name"`
	// Repository full name
	FullName string `json:"full_name"`
	// Repository short description
	Description string `json:"description"`
	// Repository programming language
	Language string `json:"language"`
	// Repository SPDX license
	License string `json:"license"`
	// Repository GitHub linked URL
	Url string `json:"url"`
	// Repository GitHub homepage
	Homepage string `json:"homepage"`
	// Repository GitHub topics
	Topics []string `json:"topics"`
	// Repository number of open PRs
	OpenPrsCount *int32 `json:"open_prs_count,omitempty"`
	// Repository number of closed PRs
	ClosedPrsCount *int32 `json:"closed_prs_count,omitempty"`
	// Repository number of merged PRs
	MergedPrsCount *int32 `json:"merged_prs_count,omitempty"`
	// Repository number of draft PRs
	DraftPrsCount *int32 `json:"draft_prs_count,omitempty"`
	// Repository number of spam PRs
	SpamPrsCount *int32 `json:"spam_prs_count,omitempty"`
	// Repository average open/close time for PRs
	PrVelocityCount *int32 `json:"pr_velocity_count,omitempty"`
	// Number of non-closed PRs updated within the day range
	PrActiveCount *int32 `json:"pr_active_count,omitempty"`
}

// NewDbRepo instantiates a new DbRepo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbRepo(id int32, userId int32, size int32, issues int32, stars int32, forks int32, watchers int32, subscribers int32, network int32, isFork bool, isPrivate bool, isTemplate bool, isArchived bool, isDisabled bool, hasIssues bool, hasProjects bool, hasDownloads bool, hasWiki bool, hasPages bool, hasDiscussions bool, defaultBranch string, nodeId string, gitUrl string, sshUrl string, cloneUrl string, svnUrl string, name string, fullName string, description string, language string, license string, url string, homepage string, topics []string) *DbRepo {
	this := DbRepo{}
	this.Id = id
	this.UserId = userId
	this.Size = size
	this.Issues = issues
	this.Stars = stars
	this.Forks = forks
	this.Watchers = watchers
	this.Subscribers = subscribers
	this.Network = network
	this.IsFork = isFork
	this.IsPrivate = isPrivate
	this.IsTemplate = isTemplate
	this.IsArchived = isArchived
	this.IsDisabled = isDisabled
	this.HasIssues = hasIssues
	this.HasProjects = hasProjects
	this.HasDownloads = hasDownloads
	this.HasWiki = hasWiki
	this.HasPages = hasPages
	this.HasDiscussions = hasDiscussions
	this.DefaultBranch = defaultBranch
	this.NodeId = nodeId
	this.GitUrl = gitUrl
	this.SshUrl = sshUrl
	this.CloneUrl = cloneUrl
	this.SvnUrl = svnUrl
	this.Name = name
	this.FullName = fullName
	this.Description = description
	this.Language = language
	this.License = license
	this.Url = url
	this.Homepage = homepage
	this.Topics = topics
	return &this
}

// NewDbRepoWithDefaults instantiates a new DbRepo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbRepoWithDefaults() *DbRepo {
	this := DbRepo{}
	return &this
}

// GetId returns the Id field value
func (o *DbRepo) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DbRepo) SetId(v int32) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *DbRepo) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DbRepo) SetUserId(v int32) {
	o.UserId = v
}

// GetSize returns the Size field value
func (o *DbRepo) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *DbRepo) SetSize(v int32) {
	o.Size = v
}

// GetIssues returns the Issues field value
func (o *DbRepo) GetIssues() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetIssuesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issues, true
}

// SetIssues sets field value
func (o *DbRepo) SetIssues(v int32) {
	o.Issues = v
}

// GetStars returns the Stars field value
func (o *DbRepo) GetStars() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Stars
}

// GetStarsOk returns a tuple with the Stars field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetStarsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stars, true
}

// SetStars sets field value
func (o *DbRepo) SetStars(v int32) {
	o.Stars = v
}

// GetForks returns the Forks field value
func (o *DbRepo) GetForks() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Forks
}

// GetForksOk returns a tuple with the Forks field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetForksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Forks, true
}

// SetForks sets field value
func (o *DbRepo) SetForks(v int32) {
	o.Forks = v
}

// GetWatchers returns the Watchers field value
func (o *DbRepo) GetWatchers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Watchers
}

// GetWatchersOk returns a tuple with the Watchers field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetWatchersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Watchers, true
}

// SetWatchers sets field value
func (o *DbRepo) SetWatchers(v int32) {
	o.Watchers = v
}

// GetSubscribers returns the Subscribers field value
func (o *DbRepo) GetSubscribers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Subscribers
}

// GetSubscribersOk returns a tuple with the Subscribers field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetSubscribersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subscribers, true
}

// SetSubscribers sets field value
func (o *DbRepo) SetSubscribers(v int32) {
	o.Subscribers = v
}

// GetNetwork returns the Network field value
func (o *DbRepo) GetNetwork() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetNetworkOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *DbRepo) SetNetwork(v int32) {
	o.Network = v
}

// GetIsFork returns the IsFork field value
func (o *DbRepo) GetIsFork() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsFork
}

// GetIsForkOk returns a tuple with the IsFork field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetIsForkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsFork, true
}

// SetIsFork sets field value
func (o *DbRepo) SetIsFork(v bool) {
	o.IsFork = v
}

// GetIsPrivate returns the IsPrivate field value
func (o *DbRepo) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *DbRepo) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetIsTemplate returns the IsTemplate field value
func (o *DbRepo) GetIsTemplate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTemplate
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetIsTemplateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTemplate, true
}

// SetIsTemplate sets field value
func (o *DbRepo) SetIsTemplate(v bool) {
	o.IsTemplate = v
}

// GetIsArchived returns the IsArchived field value
func (o *DbRepo) GetIsArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetIsArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsArchived, true
}

// SetIsArchived sets field value
func (o *DbRepo) SetIsArchived(v bool) {
	o.IsArchived = v
}

// GetIsDisabled returns the IsDisabled field value
func (o *DbRepo) GetIsDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetIsDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDisabled, true
}

// SetIsDisabled sets field value
func (o *DbRepo) SetIsDisabled(v bool) {
	o.IsDisabled = v
}

// GetHasIssues returns the HasIssues field value
func (o *DbRepo) GetHasIssues() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasIssues
}

// GetHasIssuesOk returns a tuple with the HasIssues field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetHasIssuesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasIssues, true
}

// SetHasIssues sets field value
func (o *DbRepo) SetHasIssues(v bool) {
	o.HasIssues = v
}

// GetHasProjects returns the HasProjects field value
func (o *DbRepo) GetHasProjects() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasProjects
}

// GetHasProjectsOk returns a tuple with the HasProjects field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetHasProjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasProjects, true
}

// SetHasProjects sets field value
func (o *DbRepo) SetHasProjects(v bool) {
	o.HasProjects = v
}

// GetHasDownloads returns the HasDownloads field value
func (o *DbRepo) GetHasDownloads() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDownloads
}

// GetHasDownloadsOk returns a tuple with the HasDownloads field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetHasDownloadsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDownloads, true
}

// SetHasDownloads sets field value
func (o *DbRepo) SetHasDownloads(v bool) {
	o.HasDownloads = v
}

// GetHasWiki returns the HasWiki field value
func (o *DbRepo) GetHasWiki() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasWiki
}

// GetHasWikiOk returns a tuple with the HasWiki field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetHasWikiOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasWiki, true
}

// SetHasWiki sets field value
func (o *DbRepo) SetHasWiki(v bool) {
	o.HasWiki = v
}

// GetHasPages returns the HasPages field value
func (o *DbRepo) GetHasPages() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasPages
}

// GetHasPagesOk returns a tuple with the HasPages field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetHasPagesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasPages, true
}

// SetHasPages sets field value
func (o *DbRepo) SetHasPages(v bool) {
	o.HasPages = v
}

// GetHasDiscussions returns the HasDiscussions field value
func (o *DbRepo) GetHasDiscussions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasDiscussions
}

// GetHasDiscussionsOk returns a tuple with the HasDiscussions field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetHasDiscussionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasDiscussions, true
}

// SetHasDiscussions sets field value
func (o *DbRepo) SetHasDiscussions(v bool) {
	o.HasDiscussions = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DbRepo) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DbRepo) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DbRepo) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DbRepo) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DbRepo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DbRepo) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetPushedAt returns the PushedAt field value if set, zero value otherwise.
func (o *DbRepo) GetPushedAt() time.Time {
	if o == nil || IsNil(o.PushedAt) {
		var ret time.Time
		return ret
	}
	return *o.PushedAt
}

// GetPushedAtOk returns a tuple with the PushedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetPushedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PushedAt) {
		return nil, false
	}
	return o.PushedAt, true
}

// HasPushedAt returns a boolean if a field has been set.
func (o *DbRepo) HasPushedAt() bool {
	if o != nil && !IsNil(o.PushedAt) {
		return true
	}

	return false
}

// SetPushedAt gets a reference to the given time.Time and assigns it to the PushedAt field.
func (o *DbRepo) SetPushedAt(v time.Time) {
	o.PushedAt = &v
}

// GetDefaultBranch returns the DefaultBranch field value
func (o *DbRepo) GetDefaultBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetDefaultBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultBranch, true
}

// SetDefaultBranch sets field value
func (o *DbRepo) SetDefaultBranch(v string) {
	o.DefaultBranch = v
}

// GetNodeId returns the NodeId field value
func (o *DbRepo) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *DbRepo) SetNodeId(v string) {
	o.NodeId = v
}

// GetGitUrl returns the GitUrl field value
func (o *DbRepo) GetGitUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetGitUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitUrl, true
}

// SetGitUrl sets field value
func (o *DbRepo) SetGitUrl(v string) {
	o.GitUrl = v
}

// GetSshUrl returns the SshUrl field value
func (o *DbRepo) GetSshUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SshUrl
}

// GetSshUrlOk returns a tuple with the SshUrl field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetSshUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SshUrl, true
}

// SetSshUrl sets field value
func (o *DbRepo) SetSshUrl(v string) {
	o.SshUrl = v
}

// GetCloneUrl returns the CloneUrl field value
func (o *DbRepo) GetCloneUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloneUrl
}

// GetCloneUrlOk returns a tuple with the CloneUrl field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetCloneUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloneUrl, true
}

// SetCloneUrl sets field value
func (o *DbRepo) SetCloneUrl(v string) {
	o.CloneUrl = v
}

// GetSvnUrl returns the SvnUrl field value
func (o *DbRepo) GetSvnUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SvnUrl
}

// GetSvnUrlOk returns a tuple with the SvnUrl field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetSvnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SvnUrl, true
}

// SetSvnUrl sets field value
func (o *DbRepo) SetSvnUrl(v string) {
	o.SvnUrl = v
}

// GetMirrorUrl returns the MirrorUrl field value if set, zero value otherwise.
func (o *DbRepo) GetMirrorUrl() string {
	if o == nil || IsNil(o.MirrorUrl) {
		var ret string
		return ret
	}
	return *o.MirrorUrl
}

// GetMirrorUrlOk returns a tuple with the MirrorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetMirrorUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MirrorUrl) {
		return nil, false
	}
	return o.MirrorUrl, true
}

// HasMirrorUrl returns a boolean if a field has been set.
func (o *DbRepo) HasMirrorUrl() bool {
	if o != nil && !IsNil(o.MirrorUrl) {
		return true
	}

	return false
}

// SetMirrorUrl gets a reference to the given string and assigns it to the MirrorUrl field.
func (o *DbRepo) SetMirrorUrl(v string) {
	o.MirrorUrl = &v
}

// GetName returns the Name field value
func (o *DbRepo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DbRepo) SetName(v string) {
	o.Name = v
}

// GetFullName returns the FullName field value
func (o *DbRepo) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *DbRepo) SetFullName(v string) {
	o.FullName = v
}

// GetDescription returns the Description field value
func (o *DbRepo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *DbRepo) SetDescription(v string) {
	o.Description = v
}

// GetLanguage returns the Language field value
func (o *DbRepo) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *DbRepo) SetLanguage(v string) {
	o.Language = v
}

// GetLicense returns the License field value
func (o *DbRepo) GetLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *DbRepo) SetLicense(v string) {
	o.License = v
}

// GetUrl returns the Url field value
func (o *DbRepo) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *DbRepo) SetUrl(v string) {
	o.Url = v
}

// GetHomepage returns the Homepage field value
func (o *DbRepo) GetHomepage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetHomepageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Homepage, true
}

// SetHomepage sets field value
func (o *DbRepo) SetHomepage(v string) {
	o.Homepage = v
}

// GetTopics returns the Topics field value
func (o *DbRepo) GetTopics() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value
// and a boolean to check if the value has been set.
func (o *DbRepo) GetTopicsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Topics, true
}

// SetTopics sets field value
func (o *DbRepo) SetTopics(v []string) {
	o.Topics = v
}

// GetOpenPrsCount returns the OpenPrsCount field value if set, zero value otherwise.
func (o *DbRepo) GetOpenPrsCount() int32 {
	if o == nil || IsNil(o.OpenPrsCount) {
		var ret int32
		return ret
	}
	return *o.OpenPrsCount
}

// GetOpenPrsCountOk returns a tuple with the OpenPrsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetOpenPrsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenPrsCount) {
		return nil, false
	}
	return o.OpenPrsCount, true
}

// HasOpenPrsCount returns a boolean if a field has been set.
func (o *DbRepo) HasOpenPrsCount() bool {
	if o != nil && !IsNil(o.OpenPrsCount) {
		return true
	}

	return false
}

// SetOpenPrsCount gets a reference to the given int32 and assigns it to the OpenPrsCount field.
func (o *DbRepo) SetOpenPrsCount(v int32) {
	o.OpenPrsCount = &v
}

// GetClosedPrsCount returns the ClosedPrsCount field value if set, zero value otherwise.
func (o *DbRepo) GetClosedPrsCount() int32 {
	if o == nil || IsNil(o.ClosedPrsCount) {
		var ret int32
		return ret
	}
	return *o.ClosedPrsCount
}

// GetClosedPrsCountOk returns a tuple with the ClosedPrsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetClosedPrsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ClosedPrsCount) {
		return nil, false
	}
	return o.ClosedPrsCount, true
}

// HasClosedPrsCount returns a boolean if a field has been set.
func (o *DbRepo) HasClosedPrsCount() bool {
	if o != nil && !IsNil(o.ClosedPrsCount) {
		return true
	}

	return false
}

// SetClosedPrsCount gets a reference to the given int32 and assigns it to the ClosedPrsCount field.
func (o *DbRepo) SetClosedPrsCount(v int32) {
	o.ClosedPrsCount = &v
}

// GetMergedPrsCount returns the MergedPrsCount field value if set, zero value otherwise.
func (o *DbRepo) GetMergedPrsCount() int32 {
	if o == nil || IsNil(o.MergedPrsCount) {
		var ret int32
		return ret
	}
	return *o.MergedPrsCount
}

// GetMergedPrsCountOk returns a tuple with the MergedPrsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetMergedPrsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MergedPrsCount) {
		return nil, false
	}
	return o.MergedPrsCount, true
}

// HasMergedPrsCount returns a boolean if a field has been set.
func (o *DbRepo) HasMergedPrsCount() bool {
	if o != nil && !IsNil(o.MergedPrsCount) {
		return true
	}

	return false
}

// SetMergedPrsCount gets a reference to the given int32 and assigns it to the MergedPrsCount field.
func (o *DbRepo) SetMergedPrsCount(v int32) {
	o.MergedPrsCount = &v
}

// GetDraftPrsCount returns the DraftPrsCount field value if set, zero value otherwise.
func (o *DbRepo) GetDraftPrsCount() int32 {
	if o == nil || IsNil(o.DraftPrsCount) {
		var ret int32
		return ret
	}
	return *o.DraftPrsCount
}

// GetDraftPrsCountOk returns a tuple with the DraftPrsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetDraftPrsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DraftPrsCount) {
		return nil, false
	}
	return o.DraftPrsCount, true
}

// HasDraftPrsCount returns a boolean if a field has been set.
func (o *DbRepo) HasDraftPrsCount() bool {
	if o != nil && !IsNil(o.DraftPrsCount) {
		return true
	}

	return false
}

// SetDraftPrsCount gets a reference to the given int32 and assigns it to the DraftPrsCount field.
func (o *DbRepo) SetDraftPrsCount(v int32) {
	o.DraftPrsCount = &v
}

// GetSpamPrsCount returns the SpamPrsCount field value if set, zero value otherwise.
func (o *DbRepo) GetSpamPrsCount() int32 {
	if o == nil || IsNil(o.SpamPrsCount) {
		var ret int32
		return ret
	}
	return *o.SpamPrsCount
}

// GetSpamPrsCountOk returns a tuple with the SpamPrsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetSpamPrsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SpamPrsCount) {
		return nil, false
	}
	return o.SpamPrsCount, true
}

// HasSpamPrsCount returns a boolean if a field has been set.
func (o *DbRepo) HasSpamPrsCount() bool {
	if o != nil && !IsNil(o.SpamPrsCount) {
		return true
	}

	return false
}

// SetSpamPrsCount gets a reference to the given int32 and assigns it to the SpamPrsCount field.
func (o *DbRepo) SetSpamPrsCount(v int32) {
	o.SpamPrsCount = &v
}

// GetPrVelocityCount returns the PrVelocityCount field value if set, zero value otherwise.
func (o *DbRepo) GetPrVelocityCount() int32 {
	if o == nil || IsNil(o.PrVelocityCount) {
		var ret int32
		return ret
	}
	return *o.PrVelocityCount
}

// GetPrVelocityCountOk returns a tuple with the PrVelocityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetPrVelocityCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PrVelocityCount) {
		return nil, false
	}
	return o.PrVelocityCount, true
}

// HasPrVelocityCount returns a boolean if a field has been set.
func (o *DbRepo) HasPrVelocityCount() bool {
	if o != nil && !IsNil(o.PrVelocityCount) {
		return true
	}

	return false
}

// SetPrVelocityCount gets a reference to the given int32 and assigns it to the PrVelocityCount field.
func (o *DbRepo) SetPrVelocityCount(v int32) {
	o.PrVelocityCount = &v
}

// GetPrActiveCount returns the PrActiveCount field value if set, zero value otherwise.
func (o *DbRepo) GetPrActiveCount() int32 {
	if o == nil || IsNil(o.PrActiveCount) {
		var ret int32
		return ret
	}
	return *o.PrActiveCount
}

// GetPrActiveCountOk returns a tuple with the PrActiveCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRepo) GetPrActiveCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PrActiveCount) {
		return nil, false
	}
	return o.PrActiveCount, true
}

// HasPrActiveCount returns a boolean if a field has been set.
func (o *DbRepo) HasPrActiveCount() bool {
	if o != nil && !IsNil(o.PrActiveCount) {
		return true
	}

	return false
}

// SetPrActiveCount gets a reference to the given int32 and assigns it to the PrActiveCount field.
func (o *DbRepo) SetPrActiveCount(v int32) {
	o.PrActiveCount = &v
}

func (o DbRepo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbRepo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user_id"] = o.UserId
	toSerialize["size"] = o.Size
	toSerialize["issues"] = o.Issues
	toSerialize["stars"] = o.Stars
	toSerialize["forks"] = o.Forks
	toSerialize["watchers"] = o.Watchers
	toSerialize["subscribers"] = o.Subscribers
	toSerialize["network"] = o.Network
	toSerialize["is_fork"] = o.IsFork
	toSerialize["is_private"] = o.IsPrivate
	toSerialize["is_template"] = o.IsTemplate
	toSerialize["is_archived"] = o.IsArchived
	toSerialize["is_disabled"] = o.IsDisabled
	toSerialize["has_issues"] = o.HasIssues
	toSerialize["has_projects"] = o.HasProjects
	toSerialize["has_downloads"] = o.HasDownloads
	toSerialize["has_wiki"] = o.HasWiki
	toSerialize["has_pages"] = o.HasPages
	toSerialize["has_discussions"] = o.HasDiscussions
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.PushedAt) {
		toSerialize["pushed_at"] = o.PushedAt
	}
	toSerialize["default_branch"] = o.DefaultBranch
	toSerialize["node_id"] = o.NodeId
	toSerialize["git_url"] = o.GitUrl
	toSerialize["ssh_url"] = o.SshUrl
	toSerialize["clone_url"] = o.CloneUrl
	toSerialize["svn_url"] = o.SvnUrl
	if !IsNil(o.MirrorUrl) {
		toSerialize["mirror_url"] = o.MirrorUrl
	}
	toSerialize["name"] = o.Name
	toSerialize["full_name"] = o.FullName
	toSerialize["description"] = o.Description
	toSerialize["language"] = o.Language
	toSerialize["license"] = o.License
	toSerialize["url"] = o.Url
	toSerialize["homepage"] = o.Homepage
	toSerialize["topics"] = o.Topics
	if !IsNil(o.OpenPrsCount) {
		toSerialize["open_prs_count"] = o.OpenPrsCount
	}
	if !IsNil(o.ClosedPrsCount) {
		toSerialize["closed_prs_count"] = o.ClosedPrsCount
	}
	if !IsNil(o.MergedPrsCount) {
		toSerialize["merged_prs_count"] = o.MergedPrsCount
	}
	if !IsNil(o.DraftPrsCount) {
		toSerialize["draft_prs_count"] = o.DraftPrsCount
	}
	if !IsNil(o.SpamPrsCount) {
		toSerialize["spam_prs_count"] = o.SpamPrsCount
	}
	if !IsNil(o.PrVelocityCount) {
		toSerialize["pr_velocity_count"] = o.PrVelocityCount
	}
	if !IsNil(o.PrActiveCount) {
		toSerialize["pr_active_count"] = o.PrActiveCount
	}
	return toSerialize, nil
}

type NullableDbRepo struct {
	value *DbRepo
	isSet bool
}

func (v NullableDbRepo) Get() *DbRepo {
	return v.value
}

func (v *NullableDbRepo) Set(val *DbRepo) {
	v.value = val
	v.isSet = true
}

func (v NullableDbRepo) IsSet() bool {
	return v.isSet
}

func (v *NullableDbRepo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbRepo(val *DbRepo) *NullableDbRepo {
	return &NullableDbRepo{value: val, isSet: true}
}

func (v NullableDbRepo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbRepo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
