/*
@open-sauced/api.opensauced.pizza

Testing UserHighlightsServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"testing"

	openapiclient "github.com/open-sauced/go-api/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_UserHighlightsServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserHighlightsServiceAPIService AddHighlightForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserHighlightsServiceAPI.AddHighlightForUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService AddHighlightReactionForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var emojiId string

		resp, httpRes, err := apiClient.UserHighlightsServiceAPI.AddHighlightReactionForUser(context.Background(), id, emojiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService DeleteHighlightForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		httpRes, err := apiClient.UserHighlightsServiceAPI.DeleteHighlightForUser(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService DeleteHighlightReactionForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32
		var emojiId string

		httpRes, err := apiClient.UserHighlightsServiceAPI.DeleteHighlightReactionForUser(context.Background(), id, emojiId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService GetAllHighlightUserReactions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.UserHighlightsServiceAPI.GetAllHighlightUserReactions(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService GetFollowingHighlightRepos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserHighlightsServiceAPI.GetFollowingHighlightRepos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService GetFollowingHighlights", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserHighlightsServiceAPI.GetFollowingHighlights(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService GetUserHighlight", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.UserHighlightsServiceAPI.GetUserHighlight(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserHighlightsServiceAPIService UpdateHighlightForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int32

		resp, httpRes, err := apiClient.UserHighlightsServiceAPI.UpdateHighlightForUser(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
