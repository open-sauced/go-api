/*
@open-sauced/api.opensauced.pizza

Testing WorkspaceContributorsServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"testing"

	openapiclient "github.com/open-sauced/go-api/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_client_WorkspaceContributorsServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WorkspaceContributorsServiceAPIService AddOneWorkspaceContributorForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var contributorId string

		resp, httpRes, err := apiClient.WorkspaceContributorsServiceAPI.AddOneWorkspaceContributorForUser(context.Background(), id, contributorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceContributorsServiceAPIService AddWorkspaceContributorsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.WorkspaceContributorsServiceAPI.AddWorkspaceContributorsForUser(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceContributorsServiceAPIService DeleteOneWorkspaceContributorForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string
		var contributorId string

		resp, httpRes, err := apiClient.WorkspaceContributorsServiceAPI.DeleteOneWorkspaceContributorForUser(context.Background(), id, contributorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceContributorsServiceAPIService DeleteWorkspaceContributorsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.WorkspaceContributorsServiceAPI.DeleteWorkspaceContributorsForUser(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceContributorsServiceAPIService GetWorkspaceContributorsForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.WorkspaceContributorsServiceAPI.GetWorkspaceContributorsForUser(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
