/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 1
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the DbUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbUser{}

// DbUser struct for DbUser
type DbUser struct {
	// User identifier
	Id int32 `json:"id"`
	// Total number of open issues user has across public activity
	OpenIssues int32 `json:"open_issues"`
	// Timestamp representing user creation
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Timestamp representing user last update
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Timestamp representing user first open PR
	FirstOpenedPrAt *time.Time `json:"first_opened_pr_at,omitempty"`
	// Timestamp representing user first commit push
	FirstPushedCommitAt *time.Time `json:"first_pushed_commit_at,omitempty"`
	// Timestamp representing user logging in to open sauced for the first time
	ConnectedAt *time.Time `json:"connected_at,omitempty"`
	// User GitHub node id
	NodeId string `json:"node_id"`
	// User GitHub avatar URL
	AvatarUrl string `json:"avatar_url"`
	// User GitHub gravatar URL
	GravatarId *string `json:"gravatar_id,omitempty"`
	// User GitHub profile URL
	Url *string `json:"url,omitempty"`
	// User unique login name
	Login string `json:"login"`
	// User email address
	Email string `json:"email"`
	// Flag indicating whether user opted to have a private profile (beta feature
	IsPrivate bool `json:"is_private"`
	// Flag indicating app.opensauced user status
	IsOpenSaucedMember bool `json:"is_open_sauced_member"`
	// Flag indicating user's onboarding status
	IsOnboarded bool `json:"is_onboarded"`
	// Flag indicating user's waitlist status
	IsWaitlisted bool `json:"is_waitlisted"`
	// Insights Role
	Role int32 `json:"role"`
	// User bio information
	Bio *string `json:"bio,omitempty"`
	// GitHub blog information
	Blog *string `json:"blog,omitempty"`
	// User name information
	Name *string `json:"name,omitempty"`
	// User Twitter information
	TwitterUsername *string `json:"twitter_username,omitempty"`
	// LinkedIn URL
	LinkedinUrl *string `json:"linkedin_url,omitempty"`
	// GitHub Sponsors URL
	GithubSponsorsUrl *string `json:"github_sponsors_url,omitempty"`
	// Discord URL
	DiscordUrl *string `json:"discord_url,omitempty"`
	// User company information
	Company *string `json:"company,omitempty"`
	// User location information
	Location *string `json:"location,omitempty"`
	// User display local time information
	DisplayLocalTime *bool `json:"display_local_time,omitempty"`
	// User topic interests
	Interests *string `json:"interests,omitempty"`
	// GitHub user hireable status
	Hireable *bool `json:"hireable,omitempty"`
	// GitHub user public repos number
	PublicRepos int32 `json:"public_repos"`
	// GitHub user public gists number
	PublicGists int32 `json:"public_gists"`
	// GitHub user public followers number
	Followers int32 `json:"followers"`
	// GitHub user public following number
	Following int32 `json:"following"`
	// GitHub user type
	Type string `json:"type"`
	// User display public email
	DisplayEmail *bool `json:"display_email,omitempty"`
	// User receives collaboration requests
	ReceiveCollaboration *bool `json:"receive_collaboration,omitempty"`
	// User timezone in UTC
	Timezone *string `json:"timezone,omitempty"`
	// Coupon Code
	CouponCode *string `json:"coupon_code,omitempty"`
	// GitHub top languages
	Languages map[string]interface{} `json:"languages"`
	// User notification count
	NotificationCount int32 `json:"notification_count"`
	// User insight pages count
	InsightsCount int32 `json:"insights_count"`
	// User highlights count
	HighlightsCount int32 `json:"highlights_count"`
	// User following count
	FollowingCount int32 `json:"following_count"`
	// User followers count
	FollowersCount int32 `json:"followers_count"`
	// Count of user pull requests within the last 30 days
	RecentPullRequestsCount int32 `json:"recent_pull_requests_count"`
	// User average pull request velocity in days over the last 30 days
	RecentPullRequestVelocityCount int32 `json:"recent_pull_request_velocity_count"`
	// Flag to indicate if user is a maintainer of any repos
	IsMaintainer bool `json:"is_maintainer"`
}

// NewDbUser instantiates a new DbUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbUser(id int32, openIssues int32, nodeId string, avatarUrl string, login string, email string, isPrivate bool, isOpenSaucedMember bool, isOnboarded bool, isWaitlisted bool, role int32, publicRepos int32, publicGists int32, followers int32, following int32, type_ string, languages map[string]interface{}, notificationCount int32, insightsCount int32, highlightsCount int32, followingCount int32, followersCount int32, recentPullRequestsCount int32, recentPullRequestVelocityCount int32, isMaintainer bool) *DbUser {
	this := DbUser{}
	this.Id = id
	this.OpenIssues = openIssues
	this.NodeId = nodeId
	this.AvatarUrl = avatarUrl
	this.Login = login
	this.Email = email
	this.IsPrivate = isPrivate
	this.IsOpenSaucedMember = isOpenSaucedMember
	this.IsOnboarded = isOnboarded
	this.IsWaitlisted = isWaitlisted
	this.Role = role
	this.PublicRepos = publicRepos
	this.PublicGists = publicGists
	this.Followers = followers
	this.Following = following
	this.Type = type_
	this.Languages = languages
	this.NotificationCount = notificationCount
	this.InsightsCount = insightsCount
	this.HighlightsCount = highlightsCount
	this.FollowingCount = followingCount
	this.FollowersCount = followersCount
	this.RecentPullRequestsCount = recentPullRequestsCount
	this.RecentPullRequestVelocityCount = recentPullRequestVelocityCount
	this.IsMaintainer = isMaintainer
	return &this
}

// NewDbUserWithDefaults instantiates a new DbUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbUserWithDefaults() *DbUser {
	this := DbUser{}
	var isPrivate bool = false
	this.IsPrivate = isPrivate
	var isOpenSaucedMember bool = false
	this.IsOpenSaucedMember = isOpenSaucedMember
	var isOnboarded bool = false
	this.IsOnboarded = isOnboarded
	var isWaitlisted bool = false
	this.IsWaitlisted = isWaitlisted
	var role int32 = 10
	this.Role = role
	var type_ string = "User"
	this.Type = type_
	return &this
}

// GetId returns the Id field value
func (o *DbUser) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DbUser) SetId(v int32) {
	o.Id = v
}

// GetOpenIssues returns the OpenIssues field value
func (o *DbUser) GetOpenIssues() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OpenIssues
}

// GetOpenIssuesOk returns a tuple with the OpenIssues field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetOpenIssuesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenIssues, true
}

// SetOpenIssues sets field value
func (o *DbUser) SetOpenIssues(v int32) {
	o.OpenIssues = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DbUser) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DbUser) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DbUser) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DbUser) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DbUser) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DbUser) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetFirstOpenedPrAt returns the FirstOpenedPrAt field value if set, zero value otherwise.
func (o *DbUser) GetFirstOpenedPrAt() time.Time {
	if o == nil || IsNil(o.FirstOpenedPrAt) {
		var ret time.Time
		return ret
	}
	return *o.FirstOpenedPrAt
}

// GetFirstOpenedPrAtOk returns a tuple with the FirstOpenedPrAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetFirstOpenedPrAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FirstOpenedPrAt) {
		return nil, false
	}
	return o.FirstOpenedPrAt, true
}

// HasFirstOpenedPrAt returns a boolean if a field has been set.
func (o *DbUser) HasFirstOpenedPrAt() bool {
	if o != nil && !IsNil(o.FirstOpenedPrAt) {
		return true
	}

	return false
}

// SetFirstOpenedPrAt gets a reference to the given time.Time and assigns it to the FirstOpenedPrAt field.
func (o *DbUser) SetFirstOpenedPrAt(v time.Time) {
	o.FirstOpenedPrAt = &v
}

// GetFirstPushedCommitAt returns the FirstPushedCommitAt field value if set, zero value otherwise.
func (o *DbUser) GetFirstPushedCommitAt() time.Time {
	if o == nil || IsNil(o.FirstPushedCommitAt) {
		var ret time.Time
		return ret
	}
	return *o.FirstPushedCommitAt
}

// GetFirstPushedCommitAtOk returns a tuple with the FirstPushedCommitAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetFirstPushedCommitAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FirstPushedCommitAt) {
		return nil, false
	}
	return o.FirstPushedCommitAt, true
}

// HasFirstPushedCommitAt returns a boolean if a field has been set.
func (o *DbUser) HasFirstPushedCommitAt() bool {
	if o != nil && !IsNil(o.FirstPushedCommitAt) {
		return true
	}

	return false
}

// SetFirstPushedCommitAt gets a reference to the given time.Time and assigns it to the FirstPushedCommitAt field.
func (o *DbUser) SetFirstPushedCommitAt(v time.Time) {
	o.FirstPushedCommitAt = &v
}

// GetConnectedAt returns the ConnectedAt field value if set, zero value otherwise.
func (o *DbUser) GetConnectedAt() time.Time {
	if o == nil || IsNil(o.ConnectedAt) {
		var ret time.Time
		return ret
	}
	return *o.ConnectedAt
}

// GetConnectedAtOk returns a tuple with the ConnectedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetConnectedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ConnectedAt) {
		return nil, false
	}
	return o.ConnectedAt, true
}

// HasConnectedAt returns a boolean if a field has been set.
func (o *DbUser) HasConnectedAt() bool {
	if o != nil && !IsNil(o.ConnectedAt) {
		return true
	}

	return false
}

// SetConnectedAt gets a reference to the given time.Time and assigns it to the ConnectedAt field.
func (o *DbUser) SetConnectedAt(v time.Time) {
	o.ConnectedAt = &v
}

// GetNodeId returns the NodeId field value
func (o *DbUser) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *DbUser) SetNodeId(v string) {
	o.NodeId = v
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *DbUser) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *DbUser) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetGravatarId returns the GravatarId field value if set, zero value otherwise.
func (o *DbUser) GetGravatarId() string {
	if o == nil || IsNil(o.GravatarId) {
		var ret string
		return ret
	}
	return *o.GravatarId
}

// GetGravatarIdOk returns a tuple with the GravatarId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetGravatarIdOk() (*string, bool) {
	if o == nil || IsNil(o.GravatarId) {
		return nil, false
	}
	return o.GravatarId, true
}

// HasGravatarId returns a boolean if a field has been set.
func (o *DbUser) HasGravatarId() bool {
	if o != nil && !IsNil(o.GravatarId) {
		return true
	}

	return false
}

// SetGravatarId gets a reference to the given string and assigns it to the GravatarId field.
func (o *DbUser) SetGravatarId(v string) {
	o.GravatarId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DbUser) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DbUser) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DbUser) SetUrl(v string) {
	o.Url = &v
}

// GetLogin returns the Login field value
func (o *DbUser) GetLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *DbUser) SetLogin(v string) {
	o.Login = v
}

// GetEmail returns the Email field value
func (o *DbUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *DbUser) SetEmail(v string) {
	o.Email = v
}

// GetIsPrivate returns the IsPrivate field value
func (o *DbUser) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *DbUser) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetIsOpenSaucedMember returns the IsOpenSaucedMember field value
func (o *DbUser) GetIsOpenSaucedMember() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOpenSaucedMember
}

// GetIsOpenSaucedMemberOk returns a tuple with the IsOpenSaucedMember field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetIsOpenSaucedMemberOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOpenSaucedMember, true
}

// SetIsOpenSaucedMember sets field value
func (o *DbUser) SetIsOpenSaucedMember(v bool) {
	o.IsOpenSaucedMember = v
}

// GetIsOnboarded returns the IsOnboarded field value
func (o *DbUser) GetIsOnboarded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOnboarded
}

// GetIsOnboardedOk returns a tuple with the IsOnboarded field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetIsOnboardedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOnboarded, true
}

// SetIsOnboarded sets field value
func (o *DbUser) SetIsOnboarded(v bool) {
	o.IsOnboarded = v
}

// GetIsWaitlisted returns the IsWaitlisted field value
func (o *DbUser) GetIsWaitlisted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsWaitlisted
}

// GetIsWaitlistedOk returns a tuple with the IsWaitlisted field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetIsWaitlistedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsWaitlisted, true
}

// SetIsWaitlisted sets field value
func (o *DbUser) SetIsWaitlisted(v bool) {
	o.IsWaitlisted = v
}

// GetRole returns the Role field value
func (o *DbUser) GetRole() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetRoleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *DbUser) SetRole(v int32) {
	o.Role = v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *DbUser) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *DbUser) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *DbUser) SetBio(v string) {
	o.Bio = &v
}

// GetBlog returns the Blog field value if set, zero value otherwise.
func (o *DbUser) GetBlog() string {
	if o == nil || IsNil(o.Blog) {
		var ret string
		return ret
	}
	return *o.Blog
}

// GetBlogOk returns a tuple with the Blog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetBlogOk() (*string, bool) {
	if o == nil || IsNil(o.Blog) {
		return nil, false
	}
	return o.Blog, true
}

// HasBlog returns a boolean if a field has been set.
func (o *DbUser) HasBlog() bool {
	if o != nil && !IsNil(o.Blog) {
		return true
	}

	return false
}

// SetBlog gets a reference to the given string and assigns it to the Blog field.
func (o *DbUser) SetBlog(v string) {
	o.Blog = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DbUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DbUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DbUser) SetName(v string) {
	o.Name = &v
}

// GetTwitterUsername returns the TwitterUsername field value if set, zero value otherwise.
func (o *DbUser) GetTwitterUsername() string {
	if o == nil || IsNil(o.TwitterUsername) {
		var ret string
		return ret
	}
	return *o.TwitterUsername
}

// GetTwitterUsernameOk returns a tuple with the TwitterUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetTwitterUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.TwitterUsername) {
		return nil, false
	}
	return o.TwitterUsername, true
}

// HasTwitterUsername returns a boolean if a field has been set.
func (o *DbUser) HasTwitterUsername() bool {
	if o != nil && !IsNil(o.TwitterUsername) {
		return true
	}

	return false
}

// SetTwitterUsername gets a reference to the given string and assigns it to the TwitterUsername field.
func (o *DbUser) SetTwitterUsername(v string) {
	o.TwitterUsername = &v
}

// GetLinkedinUrl returns the LinkedinUrl field value if set, zero value otherwise.
func (o *DbUser) GetLinkedinUrl() string {
	if o == nil || IsNil(o.LinkedinUrl) {
		var ret string
		return ret
	}
	return *o.LinkedinUrl
}

// GetLinkedinUrlOk returns a tuple with the LinkedinUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetLinkedinUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LinkedinUrl) {
		return nil, false
	}
	return o.LinkedinUrl, true
}

// HasLinkedinUrl returns a boolean if a field has been set.
func (o *DbUser) HasLinkedinUrl() bool {
	if o != nil && !IsNil(o.LinkedinUrl) {
		return true
	}

	return false
}

// SetLinkedinUrl gets a reference to the given string and assigns it to the LinkedinUrl field.
func (o *DbUser) SetLinkedinUrl(v string) {
	o.LinkedinUrl = &v
}

// GetGithubSponsorsUrl returns the GithubSponsorsUrl field value if set, zero value otherwise.
func (o *DbUser) GetGithubSponsorsUrl() string {
	if o == nil || IsNil(o.GithubSponsorsUrl) {
		var ret string
		return ret
	}
	return *o.GithubSponsorsUrl
}

// GetGithubSponsorsUrlOk returns a tuple with the GithubSponsorsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetGithubSponsorsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GithubSponsorsUrl) {
		return nil, false
	}
	return o.GithubSponsorsUrl, true
}

// HasGithubSponsorsUrl returns a boolean if a field has been set.
func (o *DbUser) HasGithubSponsorsUrl() bool {
	if o != nil && !IsNil(o.GithubSponsorsUrl) {
		return true
	}

	return false
}

// SetGithubSponsorsUrl gets a reference to the given string and assigns it to the GithubSponsorsUrl field.
func (o *DbUser) SetGithubSponsorsUrl(v string) {
	o.GithubSponsorsUrl = &v
}

// GetDiscordUrl returns the DiscordUrl field value if set, zero value otherwise.
func (o *DbUser) GetDiscordUrl() string {
	if o == nil || IsNil(o.DiscordUrl) {
		var ret string
		return ret
	}
	return *o.DiscordUrl
}

// GetDiscordUrlOk returns a tuple with the DiscordUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetDiscordUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DiscordUrl) {
		return nil, false
	}
	return o.DiscordUrl, true
}

// HasDiscordUrl returns a boolean if a field has been set.
func (o *DbUser) HasDiscordUrl() bool {
	if o != nil && !IsNil(o.DiscordUrl) {
		return true
	}

	return false
}

// SetDiscordUrl gets a reference to the given string and assigns it to the DiscordUrl field.
func (o *DbUser) SetDiscordUrl(v string) {
	o.DiscordUrl = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *DbUser) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *DbUser) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *DbUser) SetCompany(v string) {
	o.Company = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *DbUser) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *DbUser) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *DbUser) SetLocation(v string) {
	o.Location = &v
}

// GetDisplayLocalTime returns the DisplayLocalTime field value if set, zero value otherwise.
func (o *DbUser) GetDisplayLocalTime() bool {
	if o == nil || IsNil(o.DisplayLocalTime) {
		var ret bool
		return ret
	}
	return *o.DisplayLocalTime
}

// GetDisplayLocalTimeOk returns a tuple with the DisplayLocalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetDisplayLocalTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayLocalTime) {
		return nil, false
	}
	return o.DisplayLocalTime, true
}

// HasDisplayLocalTime returns a boolean if a field has been set.
func (o *DbUser) HasDisplayLocalTime() bool {
	if o != nil && !IsNil(o.DisplayLocalTime) {
		return true
	}

	return false
}

// SetDisplayLocalTime gets a reference to the given bool and assigns it to the DisplayLocalTime field.
func (o *DbUser) SetDisplayLocalTime(v bool) {
	o.DisplayLocalTime = &v
}

// GetInterests returns the Interests field value if set, zero value otherwise.
func (o *DbUser) GetInterests() string {
	if o == nil || IsNil(o.Interests) {
		var ret string
		return ret
	}
	return *o.Interests
}

// GetInterestsOk returns a tuple with the Interests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetInterestsOk() (*string, bool) {
	if o == nil || IsNil(o.Interests) {
		return nil, false
	}
	return o.Interests, true
}

// HasInterests returns a boolean if a field has been set.
func (o *DbUser) HasInterests() bool {
	if o != nil && !IsNil(o.Interests) {
		return true
	}

	return false
}

// SetInterests gets a reference to the given string and assigns it to the Interests field.
func (o *DbUser) SetInterests(v string) {
	o.Interests = &v
}

// GetHireable returns the Hireable field value if set, zero value otherwise.
func (o *DbUser) GetHireable() bool {
	if o == nil || IsNil(o.Hireable) {
		var ret bool
		return ret
	}
	return *o.Hireable
}

// GetHireableOk returns a tuple with the Hireable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetHireableOk() (*bool, bool) {
	if o == nil || IsNil(o.Hireable) {
		return nil, false
	}
	return o.Hireable, true
}

// HasHireable returns a boolean if a field has been set.
func (o *DbUser) HasHireable() bool {
	if o != nil && !IsNil(o.Hireable) {
		return true
	}

	return false
}

// SetHireable gets a reference to the given bool and assigns it to the Hireable field.
func (o *DbUser) SetHireable(v bool) {
	o.Hireable = &v
}

// GetPublicRepos returns the PublicRepos field value
func (o *DbUser) GetPublicRepos() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PublicRepos
}

// GetPublicReposOk returns a tuple with the PublicRepos field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetPublicReposOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicRepos, true
}

// SetPublicRepos sets field value
func (o *DbUser) SetPublicRepos(v int32) {
	o.PublicRepos = v
}

// GetPublicGists returns the PublicGists field value
func (o *DbUser) GetPublicGists() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PublicGists
}

// GetPublicGistsOk returns a tuple with the PublicGists field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetPublicGistsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicGists, true
}

// SetPublicGists sets field value
func (o *DbUser) SetPublicGists(v int32) {
	o.PublicGists = v
}

// GetFollowers returns the Followers field value
func (o *DbUser) GetFollowers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Followers
}

// GetFollowersOk returns a tuple with the Followers field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetFollowersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Followers, true
}

// SetFollowers sets field value
func (o *DbUser) SetFollowers(v int32) {
	o.Followers = v
}

// GetFollowing returns the Following field value
func (o *DbUser) GetFollowing() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Following
}

// GetFollowingOk returns a tuple with the Following field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetFollowingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Following, true
}

// SetFollowing sets field value
func (o *DbUser) SetFollowing(v int32) {
	o.Following = v
}

// GetType returns the Type field value
func (o *DbUser) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DbUser) SetType(v string) {
	o.Type = v
}

// GetDisplayEmail returns the DisplayEmail field value if set, zero value otherwise.
func (o *DbUser) GetDisplayEmail() bool {
	if o == nil || IsNil(o.DisplayEmail) {
		var ret bool
		return ret
	}
	return *o.DisplayEmail
}

// GetDisplayEmailOk returns a tuple with the DisplayEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetDisplayEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayEmail) {
		return nil, false
	}
	return o.DisplayEmail, true
}

// HasDisplayEmail returns a boolean if a field has been set.
func (o *DbUser) HasDisplayEmail() bool {
	if o != nil && !IsNil(o.DisplayEmail) {
		return true
	}

	return false
}

// SetDisplayEmail gets a reference to the given bool and assigns it to the DisplayEmail field.
func (o *DbUser) SetDisplayEmail(v bool) {
	o.DisplayEmail = &v
}

// GetReceiveCollaboration returns the ReceiveCollaboration field value if set, zero value otherwise.
func (o *DbUser) GetReceiveCollaboration() bool {
	if o == nil || IsNil(o.ReceiveCollaboration) {
		var ret bool
		return ret
	}
	return *o.ReceiveCollaboration
}

// GetReceiveCollaborationOk returns a tuple with the ReceiveCollaboration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetReceiveCollaborationOk() (*bool, bool) {
	if o == nil || IsNil(o.ReceiveCollaboration) {
		return nil, false
	}
	return o.ReceiveCollaboration, true
}

// HasReceiveCollaboration returns a boolean if a field has been set.
func (o *DbUser) HasReceiveCollaboration() bool {
	if o != nil && !IsNil(o.ReceiveCollaboration) {
		return true
	}

	return false
}

// SetReceiveCollaboration gets a reference to the given bool and assigns it to the ReceiveCollaboration field.
func (o *DbUser) SetReceiveCollaboration(v bool) {
	o.ReceiveCollaboration = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *DbUser) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *DbUser) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *DbUser) SetTimezone(v string) {
	o.Timezone = &v
}

// GetCouponCode returns the CouponCode field value if set, zero value otherwise.
func (o *DbUser) GetCouponCode() string {
	if o == nil || IsNil(o.CouponCode) {
		var ret string
		return ret
	}
	return *o.CouponCode
}

// GetCouponCodeOk returns a tuple with the CouponCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUser) GetCouponCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CouponCode) {
		return nil, false
	}
	return o.CouponCode, true
}

// HasCouponCode returns a boolean if a field has been set.
func (o *DbUser) HasCouponCode() bool {
	if o != nil && !IsNil(o.CouponCode) {
		return true
	}

	return false
}

// SetCouponCode gets a reference to the given string and assigns it to the CouponCode field.
func (o *DbUser) SetCouponCode(v string) {
	o.CouponCode = &v
}

// GetLanguages returns the Languages field value
func (o *DbUser) GetLanguages() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetLanguagesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Languages, true
}

// SetLanguages sets field value
func (o *DbUser) SetLanguages(v map[string]interface{}) {
	o.Languages = v
}

// GetNotificationCount returns the NotificationCount field value
func (o *DbUser) GetNotificationCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NotificationCount
}

// GetNotificationCountOk returns a tuple with the NotificationCount field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetNotificationCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationCount, true
}

// SetNotificationCount sets field value
func (o *DbUser) SetNotificationCount(v int32) {
	o.NotificationCount = v
}

// GetInsightsCount returns the InsightsCount field value
func (o *DbUser) GetInsightsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InsightsCount
}

// GetInsightsCountOk returns a tuple with the InsightsCount field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetInsightsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InsightsCount, true
}

// SetInsightsCount sets field value
func (o *DbUser) SetInsightsCount(v int32) {
	o.InsightsCount = v
}

// GetHighlightsCount returns the HighlightsCount field value
func (o *DbUser) GetHighlightsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HighlightsCount
}

// GetHighlightsCountOk returns a tuple with the HighlightsCount field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetHighlightsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighlightsCount, true
}

// SetHighlightsCount sets field value
func (o *DbUser) SetHighlightsCount(v int32) {
	o.HighlightsCount = v
}

// GetFollowingCount returns the FollowingCount field value
func (o *DbUser) GetFollowingCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FollowingCount
}

// GetFollowingCountOk returns a tuple with the FollowingCount field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetFollowingCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FollowingCount, true
}

// SetFollowingCount sets field value
func (o *DbUser) SetFollowingCount(v int32) {
	o.FollowingCount = v
}

// GetFollowersCount returns the FollowersCount field value
func (o *DbUser) GetFollowersCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FollowersCount
}

// GetFollowersCountOk returns a tuple with the FollowersCount field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetFollowersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FollowersCount, true
}

// SetFollowersCount sets field value
func (o *DbUser) SetFollowersCount(v int32) {
	o.FollowersCount = v
}

// GetRecentPullRequestsCount returns the RecentPullRequestsCount field value
func (o *DbUser) GetRecentPullRequestsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecentPullRequestsCount
}

// GetRecentPullRequestsCountOk returns a tuple with the RecentPullRequestsCount field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetRecentPullRequestsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecentPullRequestsCount, true
}

// SetRecentPullRequestsCount sets field value
func (o *DbUser) SetRecentPullRequestsCount(v int32) {
	o.RecentPullRequestsCount = v
}

// GetRecentPullRequestVelocityCount returns the RecentPullRequestVelocityCount field value
func (o *DbUser) GetRecentPullRequestVelocityCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RecentPullRequestVelocityCount
}

// GetRecentPullRequestVelocityCountOk returns a tuple with the RecentPullRequestVelocityCount field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetRecentPullRequestVelocityCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecentPullRequestVelocityCount, true
}

// SetRecentPullRequestVelocityCount sets field value
func (o *DbUser) SetRecentPullRequestVelocityCount(v int32) {
	o.RecentPullRequestVelocityCount = v
}

// GetIsMaintainer returns the IsMaintainer field value
func (o *DbUser) GetIsMaintainer() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMaintainer
}

// GetIsMaintainerOk returns a tuple with the IsMaintainer field value
// and a boolean to check if the value has been set.
func (o *DbUser) GetIsMaintainerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMaintainer, true
}

// SetIsMaintainer sets field value
func (o *DbUser) SetIsMaintainer(v bool) {
	o.IsMaintainer = v
}

func (o DbUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["open_issues"] = o.OpenIssues
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.FirstOpenedPrAt) {
		toSerialize["first_opened_pr_at"] = o.FirstOpenedPrAt
	}
	if !IsNil(o.FirstPushedCommitAt) {
		toSerialize["first_pushed_commit_at"] = o.FirstPushedCommitAt
	}
	if !IsNil(o.ConnectedAt) {
		toSerialize["connected_at"] = o.ConnectedAt
	}
	toSerialize["node_id"] = o.NodeId
	toSerialize["avatar_url"] = o.AvatarUrl
	if !IsNil(o.GravatarId) {
		toSerialize["gravatar_id"] = o.GravatarId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["login"] = o.Login
	toSerialize["email"] = o.Email
	toSerialize["is_private"] = o.IsPrivate
	toSerialize["is_open_sauced_member"] = o.IsOpenSaucedMember
	toSerialize["is_onboarded"] = o.IsOnboarded
	toSerialize["is_waitlisted"] = o.IsWaitlisted
	toSerialize["role"] = o.Role
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.Blog) {
		toSerialize["blog"] = o.Blog
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TwitterUsername) {
		toSerialize["twitter_username"] = o.TwitterUsername
	}
	if !IsNil(o.LinkedinUrl) {
		toSerialize["linkedin_url"] = o.LinkedinUrl
	}
	if !IsNil(o.GithubSponsorsUrl) {
		toSerialize["github_sponsors_url"] = o.GithubSponsorsUrl
	}
	if !IsNil(o.DiscordUrl) {
		toSerialize["discord_url"] = o.DiscordUrl
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.DisplayLocalTime) {
		toSerialize["display_local_time"] = o.DisplayLocalTime
	}
	if !IsNil(o.Interests) {
		toSerialize["interests"] = o.Interests
	}
	if !IsNil(o.Hireable) {
		toSerialize["hireable"] = o.Hireable
	}
	toSerialize["public_repos"] = o.PublicRepos
	toSerialize["public_gists"] = o.PublicGists
	toSerialize["followers"] = o.Followers
	toSerialize["following"] = o.Following
	toSerialize["type"] = o.Type
	if !IsNil(o.DisplayEmail) {
		toSerialize["display_email"] = o.DisplayEmail
	}
	if !IsNil(o.ReceiveCollaboration) {
		toSerialize["receive_collaboration"] = o.ReceiveCollaboration
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.CouponCode) {
		toSerialize["coupon_code"] = o.CouponCode
	}
	toSerialize["languages"] = o.Languages
	toSerialize["notification_count"] = o.NotificationCount
	toSerialize["insights_count"] = o.InsightsCount
	toSerialize["highlights_count"] = o.HighlightsCount
	toSerialize["following_count"] = o.FollowingCount
	toSerialize["followers_count"] = o.FollowersCount
	toSerialize["recent_pull_requests_count"] = o.RecentPullRequestsCount
	toSerialize["recent_pull_request_velocity_count"] = o.RecentPullRequestVelocityCount
	toSerialize["is_maintainer"] = o.IsMaintainer
	return toSerialize, nil
}

type NullableDbUser struct {
	value *DbUser
	isSet bool
}

func (v NullableDbUser) Get() *DbUser {
	return v.value
}

func (v *NullableDbUser) Set(val *DbUser) {
	v.value = val
	v.isSet = true
}

func (v NullableDbUser) IsSet() bool {
	return v.isSet
}

func (v *NullableDbUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbUser(val *DbUser) *NullableDbUser {
	return &NullableDbUser{value: val, isSet: true}
}

func (v NullableDbUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
