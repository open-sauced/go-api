/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 2
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// PullRequestsServiceAPIService PullRequestsServiceAPI service
type PullRequestsServiceAPIService service

type ApiGenerateCodeExplanationRequest struct {
	ctx                        context.Context
	ApiService                 *PullRequestsServiceAPIService
	generateCodeExplanationDto *GenerateCodeExplanationDto
}

func (r ApiGenerateCodeExplanationRequest) GenerateCodeExplanationDto(generateCodeExplanationDto GenerateCodeExplanationDto) ApiGenerateCodeExplanationRequest {
	r.generateCodeExplanationDto = &generateCodeExplanationDto
	return r
}

func (r ApiGenerateCodeExplanationRequest) Execute() (*http.Response, error) {
	return r.ApiService.GenerateCodeExplanationExecute(r)
}

/*
GenerateCodeExplanation Generates an explanation for the provided code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGenerateCodeExplanationRequest
*/
func (a *PullRequestsServiceAPIService) GenerateCodeExplanation(ctx context.Context) ApiGenerateCodeExplanationRequest {
	return ApiGenerateCodeExplanationRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PullRequestsServiceAPIService) GenerateCodeExplanationExecute(r ApiGenerateCodeExplanationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullRequestsServiceAPIService.GenerateCodeExplanation")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/prs/explanation/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.generateCodeExplanationDto == nil {
		return nil, reportError("generateCodeExplanationDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generateCodeExplanationDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGenerateCodeRefactorRequest struct {
	ctx                               context.Context
	ApiService                        *PullRequestsServiceAPIService
	generateCodeRefactorSuggestionDto *GenerateCodeRefactorSuggestionDto
}

func (r ApiGenerateCodeRefactorRequest) GenerateCodeRefactorSuggestionDto(generateCodeRefactorSuggestionDto GenerateCodeRefactorSuggestionDto) ApiGenerateCodeRefactorRequest {
	r.generateCodeRefactorSuggestionDto = &generateCodeRefactorSuggestionDto
	return r
}

func (r ApiGenerateCodeRefactorRequest) Execute() (*http.Response, error) {
	return r.ApiService.GenerateCodeRefactorExecute(r)
}

/*
GenerateCodeRefactor Generates a refactor suggestion based on the provided code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGenerateCodeRefactorRequest
*/
func (a *PullRequestsServiceAPIService) GenerateCodeRefactor(ctx context.Context) ApiGenerateCodeRefactorRequest {
	return ApiGenerateCodeRefactorRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PullRequestsServiceAPIService) GenerateCodeRefactorExecute(r ApiGenerateCodeRefactorRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullRequestsServiceAPIService.GenerateCodeRefactor")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/prs/suggestion/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.generateCodeRefactorSuggestionDto == nil {
		return nil, reportError("generateCodeRefactorSuggestionDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generateCodeRefactorSuggestionDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGenerateCodeTestRequest struct {
	ctx                           context.Context
	ApiService                    *PullRequestsServiceAPIService
	generateCodeTestSuggestionDto *GenerateCodeTestSuggestionDto
}

func (r ApiGenerateCodeTestRequest) GenerateCodeTestSuggestionDto(generateCodeTestSuggestionDto GenerateCodeTestSuggestionDto) ApiGenerateCodeTestRequest {
	r.generateCodeTestSuggestionDto = &generateCodeTestSuggestionDto
	return r
}

func (r ApiGenerateCodeTestRequest) Execute() (*http.Response, error) {
	return r.ApiService.GenerateCodeTestExecute(r)
}

/*
GenerateCodeTest Generates a test for the provided code

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGenerateCodeTestRequest
*/
func (a *PullRequestsServiceAPIService) GenerateCodeTest(ctx context.Context) ApiGenerateCodeTestRequest {
	return ApiGenerateCodeTestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PullRequestsServiceAPIService) GenerateCodeTestExecute(r ApiGenerateCodeTestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullRequestsServiceAPIService.GenerateCodeTest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/prs/test/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.generateCodeTestSuggestionDto == nil {
		return nil, reportError("generateCodeTestSuggestionDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generateCodeTestSuggestionDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGeneratePRDescriptionRequest struct {
	ctx                               context.Context
	ApiService                        *PullRequestsServiceAPIService
	generatePullRequestDescriptionDto *GeneratePullRequestDescriptionDto
}

func (r ApiGeneratePRDescriptionRequest) GeneratePullRequestDescriptionDto(generatePullRequestDescriptionDto GeneratePullRequestDescriptionDto) ApiGeneratePRDescriptionRequest {
	r.generatePullRequestDescriptionDto = &generatePullRequestDescriptionDto
	return r
}

func (r ApiGeneratePRDescriptionRequest) Execute() (*http.Response, error) {
	return r.ApiService.GeneratePRDescriptionExecute(r)
}

/*
GeneratePRDescription Generates a PR description based on the provided information

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGeneratePRDescriptionRequest
*/
func (a *PullRequestsServiceAPIService) GeneratePRDescription(ctx context.Context) ApiGeneratePRDescriptionRequest {
	return ApiGeneratePRDescriptionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PullRequestsServiceAPIService) GeneratePRDescriptionExecute(r ApiGeneratePRDescriptionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullRequestsServiceAPIService.GeneratePRDescription")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/prs/description/generate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.generatePullRequestDescriptionDto == nil {
		return nil, reportError("generatePullRequestDescriptionDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.generatePullRequestDescriptionDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSearchAllPullRequestEventsRequest struct {
	ctx               context.Context
	ApiService        *PullRequestsServiceAPIService
	page              *int32
	limit             *int32
	orderDirection    *OrderDirectionEnum
	range_            *int32
	prevDaysStartDate *int32
	orderBy           *PullRequestOrderFieldsEnum
	filter            *InsightFilterFieldsEnum
	topic             *string
	repo              *string
	repoIds           *string
	status            *PullRequestStatusEnum
	contributor       *string
	listId            *string
	distinctAuthors   *string
}

func (r ApiSearchAllPullRequestEventsRequest) Page(page int32) ApiSearchAllPullRequestEventsRequest {
	r.page = &page
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) Limit(limit int32) ApiSearchAllPullRequestEventsRequest {
	r.limit = &limit
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) OrderDirection(orderDirection OrderDirectionEnum) ApiSearchAllPullRequestEventsRequest {
	r.orderDirection = &orderDirection
	return r
}

// Range in days
func (r ApiSearchAllPullRequestEventsRequest) Range_(range_ int32) ApiSearchAllPullRequestEventsRequest {
	r.range_ = &range_
	return r
}

// Number of days in the past to start range block
func (r ApiSearchAllPullRequestEventsRequest) PrevDaysStartDate(prevDaysStartDate int32) ApiSearchAllPullRequestEventsRequest {
	r.prevDaysStartDate = &prevDaysStartDate
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) OrderBy(orderBy PullRequestOrderFieldsEnum) ApiSearchAllPullRequestEventsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) Filter(filter InsightFilterFieldsEnum) ApiSearchAllPullRequestEventsRequest {
	r.filter = &filter
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) Topic(topic string) ApiSearchAllPullRequestEventsRequest {
	r.topic = &topic
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) Repo(repo string) ApiSearchAllPullRequestEventsRequest {
	r.repo = &repo
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) RepoIds(repoIds string) ApiSearchAllPullRequestEventsRequest {
	r.repoIds = &repoIds
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) Status(status PullRequestStatusEnum) ApiSearchAllPullRequestEventsRequest {
	r.status = &status
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) Contributor(contributor string) ApiSearchAllPullRequestEventsRequest {
	r.contributor = &contributor
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) ListId(listId string) ApiSearchAllPullRequestEventsRequest {
	r.listId = &listId
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) DistinctAuthors(distinctAuthors string) ApiSearchAllPullRequestEventsRequest {
	r.distinctAuthors = &distinctAuthors
	return r
}

func (r ApiSearchAllPullRequestEventsRequest) Execute() (*FindContributorPullRequestGitHubEvents200Response, *http.Response, error) {
	return r.ApiService.SearchAllPullRequestEventsExecute(r)
}

/*
SearchAllPullRequestEvents Searches pull request events using filters and paginates them

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSearchAllPullRequestEventsRequest
*/
func (a *PullRequestsServiceAPIService) SearchAllPullRequestEvents(ctx context.Context) ApiSearchAllPullRequestEventsRequest {
	return ApiSearchAllPullRequestEventsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return FindContributorPullRequestGitHubEvents200Response
func (a *PullRequestsServiceAPIService) SearchAllPullRequestEventsExecute(r ApiSearchAllPullRequestEventsRequest) (*FindContributorPullRequestGitHubEvents200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FindContributorPullRequestGitHubEvents200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullRequestsServiceAPIService.SearchAllPullRequestEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/prs/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orderDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderDirection", r.orderDirection, "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "")
	}
	if r.prevDaysStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "prev_days_start_date", r.prevDaysStartDate, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.topic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "topic", r.topic, "")
	}
	if r.repo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repo", r.repo, "")
	}
	if r.repoIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repoIds", r.repoIds, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.contributor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "contributor", r.contributor, "")
	}
	if r.listId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "listId", r.listId, "")
	}
	if r.distinctAuthors != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "distinctAuthors", r.distinctAuthors, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
