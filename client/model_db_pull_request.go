/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 1
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the DbPullRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbPullRequest{}

// DbPullRequest struct for DbPullRequest
type DbPullRequest struct {
	// Pull request identifier
	Id int32 `json:"id"`
	// Pull request number
	Number int32 `json:"number"`
	// Pull request state
	State string `json:"state"`
	// Pull request is draft
	Draft bool `json:"draft"`
	// Pull request is merged
	Merged bool `json:"merged"`
	// Pull request is mergeable
	Mergeable bool `json:"mergeable"`
	// Pull request is rebaseable
	Rebaseable bool `json:"rebaseable"`
	// Pull request title
	Title string `json:"title"`
	// Pull request source ref
	SourceLabel *string `json:"source_label,omitempty"`
	// Pull request target ref
	TargetLabel *string `json:"target_label,omitempty"`
	// Pull request source branch
	SourceBranch *string `json:"source_branch,omitempty"`
	// Pull request target branch
	TargetBranch *string `json:"target_branch,omitempty"`
	// Pull request labels
	Labels *string `json:"labels,omitempty"`
	// Pull request label names
	LabelNames []string `json:"label_names,omitempty"`
	// Pull request author username
	AuthorLogin string `json:"author_login"`
	// Pull request author avatar
	AuthorAvatar string `json:"author_avatar"`
	// Pull request assignee username
	AssigneeLogin *string `json:"assignee_login,omitempty"`
	// Pull request assignee avatar
	AssigneeAvatar *string `json:"assignee_avatar,omitempty"`
	// Timestamp representing pr creation date
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Timestamp representing pr close date
	ClosedAt *time.Time `json:"closed_at,omitempty"`
	// Timestamp representing pr merge date
	MergedAt *time.Time `json:"merged_at,omitempty"`
	// Pull request merged by username
	MergedByLogin *string `json:"merged_by_login,omitempty"`
	// Timestamp representing repository last update
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Timestamp representing internal last update
	LastUpdatedAt *time.Time `json:"last_updated_at,omitempty"`
	// PR comments
	Comments *int32 `json:"comments,omitempty"`
	// PR lines added
	Additions *int32 `json:"additions,omitempty"`
	// PR lines deleted
	Deletions *int32 `json:"deletions,omitempty"`
	// PR files changed
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	// Pull request repo full name
	FullName *string `json:"full_name,omitempty"`
	// Number of commits in the PR
	Commits *int32 `json:"commits,omitempty"`
}

// NewDbPullRequest instantiates a new DbPullRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbPullRequest(id int32, number int32, state string, draft bool, merged bool, mergeable bool, rebaseable bool, title string, authorLogin string, authorAvatar string) *DbPullRequest {
	this := DbPullRequest{}
	this.Id = id
	this.Number = number
	this.State = state
	this.Draft = draft
	this.Merged = merged
	this.Mergeable = mergeable
	this.Rebaseable = rebaseable
	this.Title = title
	this.AuthorLogin = authorLogin
	this.AuthorAvatar = authorAvatar
	return &this
}

// NewDbPullRequestWithDefaults instantiates a new DbPullRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbPullRequestWithDefaults() *DbPullRequest {
	this := DbPullRequest{}
	return &this
}

// GetId returns the Id field value
func (o *DbPullRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DbPullRequest) SetId(v int32) {
	o.Id = v
}

// GetNumber returns the Number field value
func (o *DbPullRequest) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *DbPullRequest) SetNumber(v int32) {
	o.Number = v
}

// GetState returns the State field value
func (o *DbPullRequest) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DbPullRequest) SetState(v string) {
	o.State = v
}

// GetDraft returns the Draft field value
func (o *DbPullRequest) GetDraft() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Draft
}

// GetDraftOk returns a tuple with the Draft field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetDraftOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Draft, true
}

// SetDraft sets field value
func (o *DbPullRequest) SetDraft(v bool) {
	o.Draft = v
}

// GetMerged returns the Merged field value
func (o *DbPullRequest) GetMerged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Merged
}

// GetMergedOk returns a tuple with the Merged field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetMergedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merged, true
}

// SetMerged sets field value
func (o *DbPullRequest) SetMerged(v bool) {
	o.Merged = v
}

// GetMergeable returns the Mergeable field value
func (o *DbPullRequest) GetMergeable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Mergeable
}

// GetMergeableOk returns a tuple with the Mergeable field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetMergeableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mergeable, true
}

// SetMergeable sets field value
func (o *DbPullRequest) SetMergeable(v bool) {
	o.Mergeable = v
}

// GetRebaseable returns the Rebaseable field value
func (o *DbPullRequest) GetRebaseable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Rebaseable
}

// GetRebaseableOk returns a tuple with the Rebaseable field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetRebaseableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rebaseable, true
}

// SetRebaseable sets field value
func (o *DbPullRequest) SetRebaseable(v bool) {
	o.Rebaseable = v
}

// GetTitle returns the Title field value
func (o *DbPullRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *DbPullRequest) SetTitle(v string) {
	o.Title = v
}

// GetSourceLabel returns the SourceLabel field value if set, zero value otherwise.
func (o *DbPullRequest) GetSourceLabel() string {
	if o == nil || IsNil(o.SourceLabel) {
		var ret string
		return ret
	}
	return *o.SourceLabel
}

// GetSourceLabelOk returns a tuple with the SourceLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetSourceLabelOk() (*string, bool) {
	if o == nil || IsNil(o.SourceLabel) {
		return nil, false
	}
	return o.SourceLabel, true
}

// HasSourceLabel returns a boolean if a field has been set.
func (o *DbPullRequest) HasSourceLabel() bool {
	if o != nil && !IsNil(o.SourceLabel) {
		return true
	}

	return false
}

// SetSourceLabel gets a reference to the given string and assigns it to the SourceLabel field.
func (o *DbPullRequest) SetSourceLabel(v string) {
	o.SourceLabel = &v
}

// GetTargetLabel returns the TargetLabel field value if set, zero value otherwise.
func (o *DbPullRequest) GetTargetLabel() string {
	if o == nil || IsNil(o.TargetLabel) {
		var ret string
		return ret
	}
	return *o.TargetLabel
}

// GetTargetLabelOk returns a tuple with the TargetLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetTargetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.TargetLabel) {
		return nil, false
	}
	return o.TargetLabel, true
}

// HasTargetLabel returns a boolean if a field has been set.
func (o *DbPullRequest) HasTargetLabel() bool {
	if o != nil && !IsNil(o.TargetLabel) {
		return true
	}

	return false
}

// SetTargetLabel gets a reference to the given string and assigns it to the TargetLabel field.
func (o *DbPullRequest) SetTargetLabel(v string) {
	o.TargetLabel = &v
}

// GetSourceBranch returns the SourceBranch field value if set, zero value otherwise.
func (o *DbPullRequest) GetSourceBranch() string {
	if o == nil || IsNil(o.SourceBranch) {
		var ret string
		return ret
	}
	return *o.SourceBranch
}

// GetSourceBranchOk returns a tuple with the SourceBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetSourceBranchOk() (*string, bool) {
	if o == nil || IsNil(o.SourceBranch) {
		return nil, false
	}
	return o.SourceBranch, true
}

// HasSourceBranch returns a boolean if a field has been set.
func (o *DbPullRequest) HasSourceBranch() bool {
	if o != nil && !IsNil(o.SourceBranch) {
		return true
	}

	return false
}

// SetSourceBranch gets a reference to the given string and assigns it to the SourceBranch field.
func (o *DbPullRequest) SetSourceBranch(v string) {
	o.SourceBranch = &v
}

// GetTargetBranch returns the TargetBranch field value if set, zero value otherwise.
func (o *DbPullRequest) GetTargetBranch() string {
	if o == nil || IsNil(o.TargetBranch) {
		var ret string
		return ret
	}
	return *o.TargetBranch
}

// GetTargetBranchOk returns a tuple with the TargetBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetTargetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.TargetBranch) {
		return nil, false
	}
	return o.TargetBranch, true
}

// HasTargetBranch returns a boolean if a field has been set.
func (o *DbPullRequest) HasTargetBranch() bool {
	if o != nil && !IsNil(o.TargetBranch) {
		return true
	}

	return false
}

// SetTargetBranch gets a reference to the given string and assigns it to the TargetBranch field.
func (o *DbPullRequest) SetTargetBranch(v string) {
	o.TargetBranch = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DbPullRequest) GetLabels() string {
	if o == nil || IsNil(o.Labels) {
		var ret string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetLabelsOk() (*string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DbPullRequest) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given string and assigns it to the Labels field.
func (o *DbPullRequest) SetLabels(v string) {
	o.Labels = &v
}

// GetLabelNames returns the LabelNames field value if set, zero value otherwise.
func (o *DbPullRequest) GetLabelNames() []string {
	if o == nil || IsNil(o.LabelNames) {
		var ret []string
		return ret
	}
	return o.LabelNames
}

// GetLabelNamesOk returns a tuple with the LabelNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetLabelNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.LabelNames) {
		return nil, false
	}
	return o.LabelNames, true
}

// HasLabelNames returns a boolean if a field has been set.
func (o *DbPullRequest) HasLabelNames() bool {
	if o != nil && !IsNil(o.LabelNames) {
		return true
	}

	return false
}

// SetLabelNames gets a reference to the given []string and assigns it to the LabelNames field.
func (o *DbPullRequest) SetLabelNames(v []string) {
	o.LabelNames = v
}

// GetAuthorLogin returns the AuthorLogin field value
func (o *DbPullRequest) GetAuthorLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorLogin
}

// GetAuthorLoginOk returns a tuple with the AuthorLogin field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetAuthorLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorLogin, true
}

// SetAuthorLogin sets field value
func (o *DbPullRequest) SetAuthorLogin(v string) {
	o.AuthorLogin = v
}

// GetAuthorAvatar returns the AuthorAvatar field value
func (o *DbPullRequest) GetAuthorAvatar() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorAvatar
}

// GetAuthorAvatarOk returns a tuple with the AuthorAvatar field value
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetAuthorAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorAvatar, true
}

// SetAuthorAvatar sets field value
func (o *DbPullRequest) SetAuthorAvatar(v string) {
	o.AuthorAvatar = v
}

// GetAssigneeLogin returns the AssigneeLogin field value if set, zero value otherwise.
func (o *DbPullRequest) GetAssigneeLogin() string {
	if o == nil || IsNil(o.AssigneeLogin) {
		var ret string
		return ret
	}
	return *o.AssigneeLogin
}

// GetAssigneeLoginOk returns a tuple with the AssigneeLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetAssigneeLoginOk() (*string, bool) {
	if o == nil || IsNil(o.AssigneeLogin) {
		return nil, false
	}
	return o.AssigneeLogin, true
}

// HasAssigneeLogin returns a boolean if a field has been set.
func (o *DbPullRequest) HasAssigneeLogin() bool {
	if o != nil && !IsNil(o.AssigneeLogin) {
		return true
	}

	return false
}

// SetAssigneeLogin gets a reference to the given string and assigns it to the AssigneeLogin field.
func (o *DbPullRequest) SetAssigneeLogin(v string) {
	o.AssigneeLogin = &v
}

// GetAssigneeAvatar returns the AssigneeAvatar field value if set, zero value otherwise.
func (o *DbPullRequest) GetAssigneeAvatar() string {
	if o == nil || IsNil(o.AssigneeAvatar) {
		var ret string
		return ret
	}
	return *o.AssigneeAvatar
}

// GetAssigneeAvatarOk returns a tuple with the AssigneeAvatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetAssigneeAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.AssigneeAvatar) {
		return nil, false
	}
	return o.AssigneeAvatar, true
}

// HasAssigneeAvatar returns a boolean if a field has been set.
func (o *DbPullRequest) HasAssigneeAvatar() bool {
	if o != nil && !IsNil(o.AssigneeAvatar) {
		return true
	}

	return false
}

// SetAssigneeAvatar gets a reference to the given string and assigns it to the AssigneeAvatar field.
func (o *DbPullRequest) SetAssigneeAvatar(v string) {
	o.AssigneeAvatar = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DbPullRequest) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DbPullRequest) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DbPullRequest) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetClosedAt returns the ClosedAt field value if set, zero value otherwise.
func (o *DbPullRequest) GetClosedAt() time.Time {
	if o == nil || IsNil(o.ClosedAt) {
		var ret time.Time
		return ret
	}
	return *o.ClosedAt
}

// GetClosedAtOk returns a tuple with the ClosedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetClosedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedAt) {
		return nil, false
	}
	return o.ClosedAt, true
}

// HasClosedAt returns a boolean if a field has been set.
func (o *DbPullRequest) HasClosedAt() bool {
	if o != nil && !IsNil(o.ClosedAt) {
		return true
	}

	return false
}

// SetClosedAt gets a reference to the given time.Time and assigns it to the ClosedAt field.
func (o *DbPullRequest) SetClosedAt(v time.Time) {
	o.ClosedAt = &v
}

// GetMergedAt returns the MergedAt field value if set, zero value otherwise.
func (o *DbPullRequest) GetMergedAt() time.Time {
	if o == nil || IsNil(o.MergedAt) {
		var ret time.Time
		return ret
	}
	return *o.MergedAt
}

// GetMergedAtOk returns a tuple with the MergedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetMergedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.MergedAt) {
		return nil, false
	}
	return o.MergedAt, true
}

// HasMergedAt returns a boolean if a field has been set.
func (o *DbPullRequest) HasMergedAt() bool {
	if o != nil && !IsNil(o.MergedAt) {
		return true
	}

	return false
}

// SetMergedAt gets a reference to the given time.Time and assigns it to the MergedAt field.
func (o *DbPullRequest) SetMergedAt(v time.Time) {
	o.MergedAt = &v
}

// GetMergedByLogin returns the MergedByLogin field value if set, zero value otherwise.
func (o *DbPullRequest) GetMergedByLogin() string {
	if o == nil || IsNil(o.MergedByLogin) {
		var ret string
		return ret
	}
	return *o.MergedByLogin
}

// GetMergedByLoginOk returns a tuple with the MergedByLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetMergedByLoginOk() (*string, bool) {
	if o == nil || IsNil(o.MergedByLogin) {
		return nil, false
	}
	return o.MergedByLogin, true
}

// HasMergedByLogin returns a boolean if a field has been set.
func (o *DbPullRequest) HasMergedByLogin() bool {
	if o != nil && !IsNil(o.MergedByLogin) {
		return true
	}

	return false
}

// SetMergedByLogin gets a reference to the given string and assigns it to the MergedByLogin field.
func (o *DbPullRequest) SetMergedByLogin(v string) {
	o.MergedByLogin = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DbPullRequest) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DbPullRequest) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DbPullRequest) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLastUpdatedAt returns the LastUpdatedAt field value if set, zero value otherwise.
func (o *DbPullRequest) GetLastUpdatedAt() time.Time {
	if o == nil || IsNil(o.LastUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdatedAt
}

// GetLastUpdatedAtOk returns a tuple with the LastUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetLastUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdatedAt) {
		return nil, false
	}
	return o.LastUpdatedAt, true
}

// HasLastUpdatedAt returns a boolean if a field has been set.
func (o *DbPullRequest) HasLastUpdatedAt() bool {
	if o != nil && !IsNil(o.LastUpdatedAt) {
		return true
	}

	return false
}

// SetLastUpdatedAt gets a reference to the given time.Time and assigns it to the LastUpdatedAt field.
func (o *DbPullRequest) SetLastUpdatedAt(v time.Time) {
	o.LastUpdatedAt = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *DbPullRequest) GetComments() int32 {
	if o == nil || IsNil(o.Comments) {
		var ret int32
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetCommentsOk() (*int32, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *DbPullRequest) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given int32 and assigns it to the Comments field.
func (o *DbPullRequest) SetComments(v int32) {
	o.Comments = &v
}

// GetAdditions returns the Additions field value if set, zero value otherwise.
func (o *DbPullRequest) GetAdditions() int32 {
	if o == nil || IsNil(o.Additions) {
		var ret int32
		return ret
	}
	return *o.Additions
}

// GetAdditionsOk returns a tuple with the Additions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetAdditionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Additions) {
		return nil, false
	}
	return o.Additions, true
}

// HasAdditions returns a boolean if a field has been set.
func (o *DbPullRequest) HasAdditions() bool {
	if o != nil && !IsNil(o.Additions) {
		return true
	}

	return false
}

// SetAdditions gets a reference to the given int32 and assigns it to the Additions field.
func (o *DbPullRequest) SetAdditions(v int32) {
	o.Additions = &v
}

// GetDeletions returns the Deletions field value if set, zero value otherwise.
func (o *DbPullRequest) GetDeletions() int32 {
	if o == nil || IsNil(o.Deletions) {
		var ret int32
		return ret
	}
	return *o.Deletions
}

// GetDeletionsOk returns a tuple with the Deletions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetDeletionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Deletions) {
		return nil, false
	}
	return o.Deletions, true
}

// HasDeletions returns a boolean if a field has been set.
func (o *DbPullRequest) HasDeletions() bool {
	if o != nil && !IsNil(o.Deletions) {
		return true
	}

	return false
}

// SetDeletions gets a reference to the given int32 and assigns it to the Deletions field.
func (o *DbPullRequest) SetDeletions(v int32) {
	o.Deletions = &v
}

// GetChangedFiles returns the ChangedFiles field value if set, zero value otherwise.
func (o *DbPullRequest) GetChangedFiles() int32 {
	if o == nil || IsNil(o.ChangedFiles) {
		var ret int32
		return ret
	}
	return *o.ChangedFiles
}

// GetChangedFilesOk returns a tuple with the ChangedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetChangedFilesOk() (*int32, bool) {
	if o == nil || IsNil(o.ChangedFiles) {
		return nil, false
	}
	return o.ChangedFiles, true
}

// HasChangedFiles returns a boolean if a field has been set.
func (o *DbPullRequest) HasChangedFiles() bool {
	if o != nil && !IsNil(o.ChangedFiles) {
		return true
	}

	return false
}

// SetChangedFiles gets a reference to the given int32 and assigns it to the ChangedFiles field.
func (o *DbPullRequest) SetChangedFiles(v int32) {
	o.ChangedFiles = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *DbPullRequest) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *DbPullRequest) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *DbPullRequest) SetFullName(v string) {
	o.FullName = &v
}

// GetCommits returns the Commits field value if set, zero value otherwise.
func (o *DbPullRequest) GetCommits() int32 {
	if o == nil || IsNil(o.Commits) {
		var ret int32
		return ret
	}
	return *o.Commits
}

// GetCommitsOk returns a tuple with the Commits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbPullRequest) GetCommitsOk() (*int32, bool) {
	if o == nil || IsNil(o.Commits) {
		return nil, false
	}
	return o.Commits, true
}

// HasCommits returns a boolean if a field has been set.
func (o *DbPullRequest) HasCommits() bool {
	if o != nil && !IsNil(o.Commits) {
		return true
	}

	return false
}

// SetCommits gets a reference to the given int32 and assigns it to the Commits field.
func (o *DbPullRequest) SetCommits(v int32) {
	o.Commits = &v
}

func (o DbPullRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbPullRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["number"] = o.Number
	toSerialize["state"] = o.State
	toSerialize["draft"] = o.Draft
	toSerialize["merged"] = o.Merged
	toSerialize["mergeable"] = o.Mergeable
	toSerialize["rebaseable"] = o.Rebaseable
	toSerialize["title"] = o.Title
	if !IsNil(o.SourceLabel) {
		toSerialize["source_label"] = o.SourceLabel
	}
	if !IsNil(o.TargetLabel) {
		toSerialize["target_label"] = o.TargetLabel
	}
	if !IsNil(o.SourceBranch) {
		toSerialize["source_branch"] = o.SourceBranch
	}
	if !IsNil(o.TargetBranch) {
		toSerialize["target_branch"] = o.TargetBranch
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.LabelNames) {
		toSerialize["label_names"] = o.LabelNames
	}
	toSerialize["author_login"] = o.AuthorLogin
	toSerialize["author_avatar"] = o.AuthorAvatar
	if !IsNil(o.AssigneeLogin) {
		toSerialize["assignee_login"] = o.AssigneeLogin
	}
	if !IsNil(o.AssigneeAvatar) {
		toSerialize["assignee_avatar"] = o.AssigneeAvatar
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ClosedAt) {
		toSerialize["closed_at"] = o.ClosedAt
	}
	if !IsNil(o.MergedAt) {
		toSerialize["merged_at"] = o.MergedAt
	}
	if !IsNil(o.MergedByLogin) {
		toSerialize["merged_by_login"] = o.MergedByLogin
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.LastUpdatedAt) {
		toSerialize["last_updated_at"] = o.LastUpdatedAt
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.Additions) {
		toSerialize["additions"] = o.Additions
	}
	if !IsNil(o.Deletions) {
		toSerialize["deletions"] = o.Deletions
	}
	if !IsNil(o.ChangedFiles) {
		toSerialize["changed_files"] = o.ChangedFiles
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.Commits) {
		toSerialize["commits"] = o.Commits
	}
	return toSerialize, nil
}

type NullableDbPullRequest struct {
	value *DbPullRequest
	isSet bool
}

func (v NullableDbPullRequest) Get() *DbPullRequest {
	return v.value
}

func (v *NullableDbPullRequest) Set(val *DbPullRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDbPullRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDbPullRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbPullRequest(val *DbPullRequest) *NullableDbPullRequest {
	return &NullableDbPullRequest{value: val, isSet: true}
}

func (v NullableDbPullRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbPullRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
