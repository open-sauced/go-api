/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 2
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the DbPullRequestGitHubEventsHistogram type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbPullRequestGitHubEventsHistogram{}

// DbPullRequestGitHubEventsHistogram struct for DbPullRequestGitHubEventsHistogram
type DbPullRequestGitHubEventsHistogram struct {
	// Timestamp representing histogram bucket day
	Bucket time.Time `json:"bucket"`
	// The width in days of the individual time bucket
	Interval float32 `json:"interval"`
	// Number of Prs created in day bucket
	PrCount int32 `json:"pr_count"`
	// Number of accepted/merged Prs in bucket
	AcceptedPrs int32 `json:"accepted_prs"`
	// Number of open, unmerged Prs in bucket
	OpenPrs int32 `json:"open_prs"`
	// Number of closed, unmerged Prs in bucket
	ClosedPrs int32 `json:"closed_prs"`
	// Number of drafted, unmerged Prs in bucket
	DraftPrs int32 `json:"draft_prs"`
	// Number of active, unmerged Prs in bucket
	ActivePrs int32 `json:"active_prs"`
	// Number of Prs marked as spam within bucket
	SpamPrs int32 `json:"spam_prs"`
	// The average number of days to merge a PR over the time period
	PrVelocity int32 `json:"pr_velocity"`
}

// NewDbPullRequestGitHubEventsHistogram instantiates a new DbPullRequestGitHubEventsHistogram object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbPullRequestGitHubEventsHistogram(bucket time.Time, interval float32, prCount int32, acceptedPrs int32, openPrs int32, closedPrs int32, draftPrs int32, activePrs int32, spamPrs int32, prVelocity int32) *DbPullRequestGitHubEventsHistogram {
	this := DbPullRequestGitHubEventsHistogram{}
	this.Bucket = bucket
	this.Interval = interval
	this.PrCount = prCount
	this.AcceptedPrs = acceptedPrs
	this.OpenPrs = openPrs
	this.ClosedPrs = closedPrs
	this.DraftPrs = draftPrs
	this.ActivePrs = activePrs
	this.SpamPrs = spamPrs
	this.PrVelocity = prVelocity
	return &this
}

// NewDbPullRequestGitHubEventsHistogramWithDefaults instantiates a new DbPullRequestGitHubEventsHistogram object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbPullRequestGitHubEventsHistogramWithDefaults() *DbPullRequestGitHubEventsHistogram {
	this := DbPullRequestGitHubEventsHistogram{}
	return &this
}

// GetBucket returns the Bucket field value
func (o *DbPullRequestGitHubEventsHistogram) GetBucket() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetBucketOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetBucket(v time.Time) {
	o.Bucket = v
}

// GetInterval returns the Interval field value
func (o *DbPullRequestGitHubEventsHistogram) GetInterval() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetIntervalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetInterval(v float32) {
	o.Interval = v
}

// GetPrCount returns the PrCount field value
func (o *DbPullRequestGitHubEventsHistogram) GetPrCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrCount
}

// GetPrCountOk returns a tuple with the PrCount field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetPrCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrCount, true
}

// SetPrCount sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetPrCount(v int32) {
	o.PrCount = v
}

// GetAcceptedPrs returns the AcceptedPrs field value
func (o *DbPullRequestGitHubEventsHistogram) GetAcceptedPrs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AcceptedPrs
}

// GetAcceptedPrsOk returns a tuple with the AcceptedPrs field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetAcceptedPrsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptedPrs, true
}

// SetAcceptedPrs sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetAcceptedPrs(v int32) {
	o.AcceptedPrs = v
}

// GetOpenPrs returns the OpenPrs field value
func (o *DbPullRequestGitHubEventsHistogram) GetOpenPrs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OpenPrs
}

// GetOpenPrsOk returns a tuple with the OpenPrs field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetOpenPrsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenPrs, true
}

// SetOpenPrs sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetOpenPrs(v int32) {
	o.OpenPrs = v
}

// GetClosedPrs returns the ClosedPrs field value
func (o *DbPullRequestGitHubEventsHistogram) GetClosedPrs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ClosedPrs
}

// GetClosedPrsOk returns a tuple with the ClosedPrs field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetClosedPrsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClosedPrs, true
}

// SetClosedPrs sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetClosedPrs(v int32) {
	o.ClosedPrs = v
}

// GetDraftPrs returns the DraftPrs field value
func (o *DbPullRequestGitHubEventsHistogram) GetDraftPrs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DraftPrs
}

// GetDraftPrsOk returns a tuple with the DraftPrs field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetDraftPrsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DraftPrs, true
}

// SetDraftPrs sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetDraftPrs(v int32) {
	o.DraftPrs = v
}

// GetActivePrs returns the ActivePrs field value
func (o *DbPullRequestGitHubEventsHistogram) GetActivePrs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ActivePrs
}

// GetActivePrsOk returns a tuple with the ActivePrs field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetActivePrsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActivePrs, true
}

// SetActivePrs sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetActivePrs(v int32) {
	o.ActivePrs = v
}

// GetSpamPrs returns the SpamPrs field value
func (o *DbPullRequestGitHubEventsHistogram) GetSpamPrs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SpamPrs
}

// GetSpamPrsOk returns a tuple with the SpamPrs field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetSpamPrsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpamPrs, true
}

// SetSpamPrs sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetSpamPrs(v int32) {
	o.SpamPrs = v
}

// GetPrVelocity returns the PrVelocity field value
func (o *DbPullRequestGitHubEventsHistogram) GetPrVelocity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PrVelocity
}

// GetPrVelocityOk returns a tuple with the PrVelocity field value
// and a boolean to check if the value has been set.
func (o *DbPullRequestGitHubEventsHistogram) GetPrVelocityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrVelocity, true
}

// SetPrVelocity sets field value
func (o *DbPullRequestGitHubEventsHistogram) SetPrVelocity(v int32) {
	o.PrVelocity = v
}

func (o DbPullRequestGitHubEventsHistogram) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbPullRequestGitHubEventsHistogram) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket"] = o.Bucket
	toSerialize["interval"] = o.Interval
	toSerialize["pr_count"] = o.PrCount
	toSerialize["accepted_prs"] = o.AcceptedPrs
	toSerialize["open_prs"] = o.OpenPrs
	toSerialize["closed_prs"] = o.ClosedPrs
	toSerialize["draft_prs"] = o.DraftPrs
	toSerialize["active_prs"] = o.ActivePrs
	toSerialize["spam_prs"] = o.SpamPrs
	toSerialize["pr_velocity"] = o.PrVelocity
	return toSerialize, nil
}

type NullableDbPullRequestGitHubEventsHistogram struct {
	value *DbPullRequestGitHubEventsHistogram
	isSet bool
}

func (v NullableDbPullRequestGitHubEventsHistogram) Get() *DbPullRequestGitHubEventsHistogram {
	return v.value
}

func (v *NullableDbPullRequestGitHubEventsHistogram) Set(val *DbPullRequestGitHubEventsHistogram) {
	v.value = val
	v.isSet = true
}

func (v NullableDbPullRequestGitHubEventsHistogram) IsSet() bool {
	return v.isSet
}

func (v *NullableDbPullRequestGitHubEventsHistogram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbPullRequestGitHubEventsHistogram(val *DbPullRequestGitHubEventsHistogram) *NullableDbPullRequestGitHubEventsHistogram {
	return &NullableDbPullRequestGitHubEventsHistogram{value: val, isSet: true}
}

func (v NullableDbPullRequestGitHubEventsHistogram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbPullRequestGitHubEventsHistogram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
