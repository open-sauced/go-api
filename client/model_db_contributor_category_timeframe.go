/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 1
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DbContributorCategoryTimeframe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbContributorCategoryTimeframe{}

// DbContributorCategoryTimeframe struct for DbContributorCategoryTimeframe
type DbContributorCategoryTimeframe struct {
	// The ISO timestamp for the start of the time frame
	TimeStart string `json:"time_start"`
	// The ISO timestamp for the end of the time frame
	TimeEnd string `json:"time_end"`
	// Number of all contributors (active, new, and alumni)
	All int32 `json:"all"`
	// Number of contributors who contributed in current time frame and previous time frame
	Active int32 `json:"active"`
	// Number of contributors who are new to contributing (contributed in current time frame but not the previous time frame)
	New int32 `json:"new"`
	// Number of contributors who did not contribute in current time frame but did in the previous time frame
	Alumni int32 `json:"alumni"`
}

// NewDbContributorCategoryTimeframe instantiates a new DbContributorCategoryTimeframe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbContributorCategoryTimeframe(timeStart string, timeEnd string, all int32, active int32, new int32, alumni int32) *DbContributorCategoryTimeframe {
	this := DbContributorCategoryTimeframe{}
	this.TimeStart = timeStart
	this.TimeEnd = timeEnd
	this.All = all
	this.Active = active
	this.New = new
	this.Alumni = alumni
	return &this
}

// NewDbContributorCategoryTimeframeWithDefaults instantiates a new DbContributorCategoryTimeframe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbContributorCategoryTimeframeWithDefaults() *DbContributorCategoryTimeframe {
	this := DbContributorCategoryTimeframe{}
	return &this
}

// GetTimeStart returns the TimeStart field value
func (o *DbContributorCategoryTimeframe) GetTimeStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeStart
}

// GetTimeStartOk returns a tuple with the TimeStart field value
// and a boolean to check if the value has been set.
func (o *DbContributorCategoryTimeframe) GetTimeStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeStart, true
}

// SetTimeStart sets field value
func (o *DbContributorCategoryTimeframe) SetTimeStart(v string) {
	o.TimeStart = v
}

// GetTimeEnd returns the TimeEnd field value
func (o *DbContributorCategoryTimeframe) GetTimeEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeEnd
}

// GetTimeEndOk returns a tuple with the TimeEnd field value
// and a boolean to check if the value has been set.
func (o *DbContributorCategoryTimeframe) GetTimeEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeEnd, true
}

// SetTimeEnd sets field value
func (o *DbContributorCategoryTimeframe) SetTimeEnd(v string) {
	o.TimeEnd = v
}

// GetAll returns the All field value
func (o *DbContributorCategoryTimeframe) GetAll() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.All
}

// GetAllOk returns a tuple with the All field value
// and a boolean to check if the value has been set.
func (o *DbContributorCategoryTimeframe) GetAllOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.All, true
}

// SetAll sets field value
func (o *DbContributorCategoryTimeframe) SetAll(v int32) {
	o.All = v
}

// GetActive returns the Active field value
func (o *DbContributorCategoryTimeframe) GetActive() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *DbContributorCategoryTimeframe) GetActiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *DbContributorCategoryTimeframe) SetActive(v int32) {
	o.Active = v
}

// GetNew returns the New field value
func (o *DbContributorCategoryTimeframe) GetNew() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.New
}

// GetNewOk returns a tuple with the New field value
// and a boolean to check if the value has been set.
func (o *DbContributorCategoryTimeframe) GetNewOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.New, true
}

// SetNew sets field value
func (o *DbContributorCategoryTimeframe) SetNew(v int32) {
	o.New = v
}

// GetAlumni returns the Alumni field value
func (o *DbContributorCategoryTimeframe) GetAlumni() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Alumni
}

// GetAlumniOk returns a tuple with the Alumni field value
// and a boolean to check if the value has been set.
func (o *DbContributorCategoryTimeframe) GetAlumniOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alumni, true
}

// SetAlumni sets field value
func (o *DbContributorCategoryTimeframe) SetAlumni(v int32) {
	o.Alumni = v
}

func (o DbContributorCategoryTimeframe) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbContributorCategoryTimeframe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["time_start"] = o.TimeStart
	toSerialize["time_end"] = o.TimeEnd
	toSerialize["all"] = o.All
	toSerialize["active"] = o.Active
	toSerialize["new"] = o.New
	toSerialize["alumni"] = o.Alumni
	return toSerialize, nil
}

type NullableDbContributorCategoryTimeframe struct {
	value *DbContributorCategoryTimeframe
	isSet bool
}

func (v NullableDbContributorCategoryTimeframe) Get() *DbContributorCategoryTimeframe {
	return v.value
}

func (v *NullableDbContributorCategoryTimeframe) Set(val *DbContributorCategoryTimeframe) {
	v.value = val
	v.isSet = true
}

func (v NullableDbContributorCategoryTimeframe) IsSet() bool {
	return v.isSet
}

func (v *NullableDbContributorCategoryTimeframe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbContributorCategoryTimeframe(val *DbContributorCategoryTimeframe) *NullableDbContributorCategoryTimeframe {
	return &NullableDbContributorCategoryTimeframe{value: val, isSet: true}
}

func (v NullableDbContributorCategoryTimeframe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbContributorCategoryTimeframe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
