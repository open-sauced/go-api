/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 2
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// checks if the DbUserHighlight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbUserHighlight{}

// DbUserHighlight struct for DbUserHighlight
type DbUserHighlight struct {
	// User Highlight identifier
	Id int32 `json:"id"`
	// User identifier
	UserId int32 `json:"user_id"`
	// Highlight Pull Request URL
	Url *string `json:"url,omitempty"`
	// Highlight Title
	Title *string `json:"title,omitempty"`
	// Highlight Text
	Highlight string `json:"highlight"`
	// Highlight type
	Type string `json:"type"`
	// Whether the highlight is pinned to the top
	Pinned *bool `json:"pinned,omitempty"`
	// Whether the highlight is featured or not
	Featured *bool `json:"featured,omitempty"`
	// Timestamp representing highlight creation date
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Timestamp representing highlight updated date
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// Timestamp representing highlight deletion date
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Timestamp representing highlight shipped date
	ShippedAt *time.Time `json:"shipped_at,omitempty"`
	// Highlight Repo Full Name
	FullName *string `json:"full_name,omitempty"`
	// Highlight User Full Name
	Name *string `json:"name,omitempty"`
	// Highlight User Login
	Login *string `json:"login,omitempty"`
	// An array of full-names of tagged repositories
	TaggedRepos []string `json:"tagged_repos"`
}

// NewDbUserHighlight instantiates a new DbUserHighlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbUserHighlight(id int32, userId int32, highlight string, type_ string, taggedRepos []string) *DbUserHighlight {
	this := DbUserHighlight{}
	this.Id = id
	this.UserId = userId
	this.Highlight = highlight
	this.Type = type_
	this.TaggedRepos = taggedRepos
	return &this
}

// NewDbUserHighlightWithDefaults instantiates a new DbUserHighlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbUserHighlightWithDefaults() *DbUserHighlight {
	this := DbUserHighlight{}
	return &this
}

// GetId returns the Id field value
func (o *DbUserHighlight) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DbUserHighlight) SetId(v int32) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *DbUserHighlight) GetUserId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetUserIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *DbUserHighlight) SetUserId(v int32) {
	o.UserId = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DbUserHighlight) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DbUserHighlight) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DbUserHighlight) SetUrl(v string) {
	o.Url = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *DbUserHighlight) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *DbUserHighlight) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *DbUserHighlight) SetTitle(v string) {
	o.Title = &v
}

// GetHighlight returns the Highlight field value
func (o *DbUserHighlight) GetHighlight() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Highlight
}

// GetHighlightOk returns a tuple with the Highlight field value
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetHighlightOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Highlight, true
}

// SetHighlight sets field value
func (o *DbUserHighlight) SetHighlight(v string) {
	o.Highlight = v
}

// GetType returns the Type field value
func (o *DbUserHighlight) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DbUserHighlight) SetType(v string) {
	o.Type = v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *DbUserHighlight) GetPinned() bool {
	if o == nil || IsNil(o.Pinned) {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetPinnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *DbUserHighlight) HasPinned() bool {
	if o != nil && !IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *DbUserHighlight) SetPinned(v bool) {
	o.Pinned = &v
}

// GetFeatured returns the Featured field value if set, zero value otherwise.
func (o *DbUserHighlight) GetFeatured() bool {
	if o == nil || IsNil(o.Featured) {
		var ret bool
		return ret
	}
	return *o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetFeaturedOk() (*bool, bool) {
	if o == nil || IsNil(o.Featured) {
		return nil, false
	}
	return o.Featured, true
}

// HasFeatured returns a boolean if a field has been set.
func (o *DbUserHighlight) HasFeatured() bool {
	if o != nil && !IsNil(o.Featured) {
		return true
	}

	return false
}

// SetFeatured gets a reference to the given bool and assigns it to the Featured field.
func (o *DbUserHighlight) SetFeatured(v bool) {
	o.Featured = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DbUserHighlight) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DbUserHighlight) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DbUserHighlight) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DbUserHighlight) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DbUserHighlight) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DbUserHighlight) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *DbUserHighlight) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *DbUserHighlight) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *DbUserHighlight) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetShippedAt returns the ShippedAt field value if set, zero value otherwise.
func (o *DbUserHighlight) GetShippedAt() time.Time {
	if o == nil || IsNil(o.ShippedAt) {
		var ret time.Time
		return ret
	}
	return *o.ShippedAt
}

// GetShippedAtOk returns a tuple with the ShippedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetShippedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ShippedAt) {
		return nil, false
	}
	return o.ShippedAt, true
}

// HasShippedAt returns a boolean if a field has been set.
func (o *DbUserHighlight) HasShippedAt() bool {
	if o != nil && !IsNil(o.ShippedAt) {
		return true
	}

	return false
}

// SetShippedAt gets a reference to the given time.Time and assigns it to the ShippedAt field.
func (o *DbUserHighlight) SetShippedAt(v time.Time) {
	o.ShippedAt = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *DbUserHighlight) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *DbUserHighlight) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *DbUserHighlight) SetFullName(v string) {
	o.FullName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DbUserHighlight) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DbUserHighlight) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DbUserHighlight) SetName(v string) {
	o.Name = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *DbUserHighlight) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *DbUserHighlight) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *DbUserHighlight) SetLogin(v string) {
	o.Login = &v
}

// GetTaggedRepos returns the TaggedRepos field value
func (o *DbUserHighlight) GetTaggedRepos() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TaggedRepos
}

// GetTaggedReposOk returns a tuple with the TaggedRepos field value
// and a boolean to check if the value has been set.
func (o *DbUserHighlight) GetTaggedReposOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaggedRepos, true
}

// SetTaggedRepos sets field value
func (o *DbUserHighlight) SetTaggedRepos(v []string) {
	o.TaggedRepos = v
}

func (o DbUserHighlight) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbUserHighlight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user_id"] = o.UserId
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	toSerialize["highlight"] = o.Highlight
	toSerialize["type"] = o.Type
	if !IsNil(o.Pinned) {
		toSerialize["pinned"] = o.Pinned
	}
	if !IsNil(o.Featured) {
		toSerialize["featured"] = o.Featured
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.ShippedAt) {
		toSerialize["shipped_at"] = o.ShippedAt
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	toSerialize["tagged_repos"] = o.TaggedRepos
	return toSerialize, nil
}

type NullableDbUserHighlight struct {
	value *DbUserHighlight
	isSet bool
}

func (v NullableDbUserHighlight) Get() *DbUserHighlight {
	return v.value
}

func (v *NullableDbUserHighlight) Set(val *DbUserHighlight) {
	v.value = val
	v.isSet = true
}

func (v NullableDbUserHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableDbUserHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbUserHighlight(val *DbUserHighlight) *NullableDbUserHighlight {
	return &NullableDbUserHighlight{value: val, isSet: true}
}

func (v NullableDbUserHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbUserHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
