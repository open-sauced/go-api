/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [https://api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 1
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ContributorsServiceAPIService ContributorsServiceAPI service
type ContributorsServiceAPIService service

type ApiFindAllChurnPullRequestContributorsRequest struct {
	ctx context.Context
	ApiService *ContributorsServiceAPIService
	page *float32
	limit *float32
	orderDirection *OrderDirectionEnum
	range_ *float32
	repoIds *string
}

func (r ApiFindAllChurnPullRequestContributorsRequest) Page(page float32) ApiFindAllChurnPullRequestContributorsRequest {
	r.page = &page
	return r
}

func (r ApiFindAllChurnPullRequestContributorsRequest) Limit(limit float32) ApiFindAllChurnPullRequestContributorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFindAllChurnPullRequestContributorsRequest) OrderDirection(orderDirection OrderDirectionEnum) ApiFindAllChurnPullRequestContributorsRequest {
	r.orderDirection = &orderDirection
	return r
}

// Range in days
func (r ApiFindAllChurnPullRequestContributorsRequest) Range_(range_ float32) ApiFindAllChurnPullRequestContributorsRequest {
	r.range_ = &range_
	return r
}

func (r ApiFindAllChurnPullRequestContributorsRequest) RepoIds(repoIds string) ApiFindAllChurnPullRequestContributorsRequest {
	r.repoIds = &repoIds
	return r
}

func (r ApiFindAllChurnPullRequestContributorsRequest) Execute() (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	return r.ApiService.FindAllChurnPullRequestContributorsExecute(r)
}

/*
FindAllChurnPullRequestContributors Gets all recent churned contributors for the last 30 days based on repo IDs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindAllChurnPullRequestContributorsRequest
*/
func (a *ContributorsServiceAPIService) FindAllChurnPullRequestContributors(ctx context.Context) ApiFindAllChurnPullRequestContributorsRequest {
	return ApiFindAllChurnPullRequestContributorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchAllPullRequestContributors200Response
func (a *ContributorsServiceAPIService) FindAllChurnPullRequestContributorsExecute(r ApiFindAllChurnPullRequestContributorsRequest) (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchAllPullRequestContributors200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContributorsServiceAPIService.FindAllChurnPullRequestContributors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contributors/insights/churn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orderDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderDirection", r.orderDirection, "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "")
	}
	if r.repoIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repoIds", r.repoIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindAllRecentPullRequestContributorsRequest struct {
	ctx context.Context
	ApiService *ContributorsServiceAPIService
	page *float32
	limit *float32
	orderDirection *OrderDirectionEnum
	range_ *float32
	repoIds *string
}

func (r ApiFindAllRecentPullRequestContributorsRequest) Page(page float32) ApiFindAllRecentPullRequestContributorsRequest {
	r.page = &page
	return r
}

func (r ApiFindAllRecentPullRequestContributorsRequest) Limit(limit float32) ApiFindAllRecentPullRequestContributorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFindAllRecentPullRequestContributorsRequest) OrderDirection(orderDirection OrderDirectionEnum) ApiFindAllRecentPullRequestContributorsRequest {
	r.orderDirection = &orderDirection
	return r
}

// Range in days
func (r ApiFindAllRecentPullRequestContributorsRequest) Range_(range_ float32) ApiFindAllRecentPullRequestContributorsRequest {
	r.range_ = &range_
	return r
}

func (r ApiFindAllRecentPullRequestContributorsRequest) RepoIds(repoIds string) ApiFindAllRecentPullRequestContributorsRequest {
	r.repoIds = &repoIds
	return r
}

func (r ApiFindAllRecentPullRequestContributorsRequest) Execute() (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	return r.ApiService.FindAllRecentPullRequestContributorsExecute(r)
}

/*
FindAllRecentPullRequestContributors Gets all recent contributors for the last 30 days based on repo IDs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindAllRecentPullRequestContributorsRequest
*/
func (a *ContributorsServiceAPIService) FindAllRecentPullRequestContributors(ctx context.Context) ApiFindAllRecentPullRequestContributorsRequest {
	return ApiFindAllRecentPullRequestContributorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchAllPullRequestContributors200Response
func (a *ContributorsServiceAPIService) FindAllRecentPullRequestContributorsExecute(r ApiFindAllRecentPullRequestContributorsRequest) (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchAllPullRequestContributors200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContributorsServiceAPIService.FindAllRecentPullRequestContributors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contributors/insights/recent"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orderDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderDirection", r.orderDirection, "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "")
	}
	if r.repoIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repoIds", r.repoIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFindAllRepeatPullRequestContributorsRequest struct {
	ctx context.Context
	ApiService *ContributorsServiceAPIService
	page *float32
	limit *float32
	orderDirection *OrderDirectionEnum
	range_ *float32
	repoIds *string
}

func (r ApiFindAllRepeatPullRequestContributorsRequest) Page(page float32) ApiFindAllRepeatPullRequestContributorsRequest {
	r.page = &page
	return r
}

func (r ApiFindAllRepeatPullRequestContributorsRequest) Limit(limit float32) ApiFindAllRepeatPullRequestContributorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFindAllRepeatPullRequestContributorsRequest) OrderDirection(orderDirection OrderDirectionEnum) ApiFindAllRepeatPullRequestContributorsRequest {
	r.orderDirection = &orderDirection
	return r
}

// Range in days
func (r ApiFindAllRepeatPullRequestContributorsRequest) Range_(range_ float32) ApiFindAllRepeatPullRequestContributorsRequest {
	r.range_ = &range_
	return r
}

func (r ApiFindAllRepeatPullRequestContributorsRequest) RepoIds(repoIds string) ApiFindAllRepeatPullRequestContributorsRequest {
	r.repoIds = &repoIds
	return r
}

func (r ApiFindAllRepeatPullRequestContributorsRequest) Execute() (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	return r.ApiService.FindAllRepeatPullRequestContributorsExecute(r)
}

/*
FindAllRepeatPullRequestContributors Gets all recent repeat contributors for the last 30 days based on repo IDs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindAllRepeatPullRequestContributorsRequest
*/
func (a *ContributorsServiceAPIService) FindAllRepeatPullRequestContributors(ctx context.Context) ApiFindAllRepeatPullRequestContributorsRequest {
	return ApiFindAllRepeatPullRequestContributorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchAllPullRequestContributors200Response
func (a *ContributorsServiceAPIService) FindAllRepeatPullRequestContributorsExecute(r ApiFindAllRepeatPullRequestContributorsRequest) (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchAllPullRequestContributors200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContributorsServiceAPIService.FindAllRepeatPullRequestContributors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contributors/insights/repeat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orderDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderDirection", r.orderDirection, "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "")
	}
	if r.repoIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repoIds", r.repoIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNewPullRequestContributorsRequest struct {
	ctx context.Context
	ApiService *ContributorsServiceAPIService
	page *float32
	limit *float32
	orderDirection *OrderDirectionEnum
	range_ *float32
	filter *InsightFilterFieldsEnum
	topic *string
	repo *string
	repoIds *string
}

func (r ApiNewPullRequestContributorsRequest) Page(page float32) ApiNewPullRequestContributorsRequest {
	r.page = &page
	return r
}

func (r ApiNewPullRequestContributorsRequest) Limit(limit float32) ApiNewPullRequestContributorsRequest {
	r.limit = &limit
	return r
}

func (r ApiNewPullRequestContributorsRequest) OrderDirection(orderDirection OrderDirectionEnum) ApiNewPullRequestContributorsRequest {
	r.orderDirection = &orderDirection
	return r
}

// Range in days
func (r ApiNewPullRequestContributorsRequest) Range_(range_ float32) ApiNewPullRequestContributorsRequest {
	r.range_ = &range_
	return r
}

func (r ApiNewPullRequestContributorsRequest) Filter(filter InsightFilterFieldsEnum) ApiNewPullRequestContributorsRequest {
	r.filter = &filter
	return r
}

func (r ApiNewPullRequestContributorsRequest) Topic(topic string) ApiNewPullRequestContributorsRequest {
	r.topic = &topic
	return r
}

func (r ApiNewPullRequestContributorsRequest) Repo(repo string) ApiNewPullRequestContributorsRequest {
	r.repo = &repo
	return r
}

func (r ApiNewPullRequestContributorsRequest) RepoIds(repoIds string) ApiNewPullRequestContributorsRequest {
	r.repoIds = &repoIds
	return r
}

func (r ApiNewPullRequestContributorsRequest) Execute() (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	return r.ApiService.NewPullRequestContributorsExecute(r)
}

/*
NewPullRequestContributors Gets new contributors given a date range for repo IDs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNewPullRequestContributorsRequest
*/
func (a *ContributorsServiceAPIService) NewPullRequestContributors(ctx context.Context) ApiNewPullRequestContributorsRequest {
	return ApiNewPullRequestContributorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchAllPullRequestContributors200Response
func (a *ContributorsServiceAPIService) NewPullRequestContributorsExecute(r ApiNewPullRequestContributorsRequest) (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchAllPullRequestContributors200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContributorsServiceAPIService.NewPullRequestContributors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contributors/insights/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orderDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderDirection", r.orderDirection, "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.topic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "topic", r.topic, "")
	}
	if r.repo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repo", r.repo, "")
	}
	if r.repoIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repoIds", r.repoIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchAllPullRequestContributorsRequest struct {
	ctx context.Context
	ApiService *ContributorsServiceAPIService
	page *float32
	limit *float32
	orderDirection *OrderDirectionEnum
	range_ *float32
	filter *InsightFilterFieldsEnum
	topic *string
	repo *string
	repoIds *string
}

func (r ApiSearchAllPullRequestContributorsRequest) Page(page float32) ApiSearchAllPullRequestContributorsRequest {
	r.page = &page
	return r
}

func (r ApiSearchAllPullRequestContributorsRequest) Limit(limit float32) ApiSearchAllPullRequestContributorsRequest {
	r.limit = &limit
	return r
}

func (r ApiSearchAllPullRequestContributorsRequest) OrderDirection(orderDirection OrderDirectionEnum) ApiSearchAllPullRequestContributorsRequest {
	r.orderDirection = &orderDirection
	return r
}

// Range in days
func (r ApiSearchAllPullRequestContributorsRequest) Range_(range_ float32) ApiSearchAllPullRequestContributorsRequest {
	r.range_ = &range_
	return r
}

func (r ApiSearchAllPullRequestContributorsRequest) Filter(filter InsightFilterFieldsEnum) ApiSearchAllPullRequestContributorsRequest {
	r.filter = &filter
	return r
}

func (r ApiSearchAllPullRequestContributorsRequest) Topic(topic string) ApiSearchAllPullRequestContributorsRequest {
	r.topic = &topic
	return r
}

func (r ApiSearchAllPullRequestContributorsRequest) Repo(repo string) ApiSearchAllPullRequestContributorsRequest {
	r.repo = &repo
	return r
}

func (r ApiSearchAllPullRequestContributorsRequest) RepoIds(repoIds string) ApiSearchAllPullRequestContributorsRequest {
	r.repoIds = &repoIds
	return r
}

func (r ApiSearchAllPullRequestContributorsRequest) Execute() (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	return r.ApiService.SearchAllPullRequestContributorsExecute(r)
}

/*
SearchAllPullRequestContributors Searches contributors from pull requests using filters and paginates them

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchAllPullRequestContributorsRequest
*/
func (a *ContributorsServiceAPIService) SearchAllPullRequestContributors(ctx context.Context) ApiSearchAllPullRequestContributorsRequest {
	return ApiSearchAllPullRequestContributorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchAllPullRequestContributors200Response
func (a *ContributorsServiceAPIService) SearchAllPullRequestContributorsExecute(r ApiSearchAllPullRequestContributorsRequest) (*SearchAllPullRequestContributors200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchAllPullRequestContributors200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContributorsServiceAPIService.SearchAllPullRequestContributors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/contributors/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.orderDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderDirection", r.orderDirection, "")
	}
	if r.range_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "range", r.range_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.topic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "topic", r.topic, "")
	}
	if r.repo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repo", r.repo, "")
	}
	if r.repoIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repoIds", r.repoIds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
