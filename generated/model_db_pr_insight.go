/*
@open-sauced/api.opensauced.pizza

 ## Swagger-UI API Documentation  This REST API can be used to create, read, update or delete data from the Open Sauced community platform. The Swagger-UI provides useful information to get started and an overview of all available resources. Each API route is clickable and has their own detailed description on how to use it. The base URL for the API is [https://api.opensauced.pizza](https://api.opensauced.pizza).  [comment]: # (TODO: add bearer auth information)  ## Rate limiting  Every IP address is allowed to perform 5000 requests per hour. This is measured by saving the date of the initial request and counting all requests in the next hour. When an IP address goes over the limit, HTTP status code 429 is returned. The returned HTTP headers of any API request show the current rate limit status:  header | description --- | --- `X-RateLimit-Limit` | The maximum number of requests allowed per hour `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window `X-RateLimit-Reset` | The date and time at which the current rate limit window resets in [UTC epoch seconds](https://en.wikipedia.org/wiki/Unix_time)  [comment]: # (TODO: add pagination information)  ## Common response codes  Each route shows for each method which data they expect and which they will respond when the call succeeds. The table below shows most common response codes you can receive from our endpoints.  code | condition --- | --- [`200`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200) | The [`GET`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET) request was handled successfully. The response provides the requested data. [`201`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/201) | The [`POST`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) request was handled successfully. The response provides the created data. [`204`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204) | The [`PATCH`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PATCH) or [`DELETE`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE) request was handled successfully. The response provides no data, generally. [`400`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400) | The server will not process the request due to something that is perceived to be a client error. Check the provided error for mote information. [`401`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401) | The request requires user authentication. Check the provided error for more information. [`403`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403) | The request was valid, but the server is refusing user access. Check the provided error for more information. [`404`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404) | The requested resource could not be found. Check the provided error for more information. [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) | The current API Key made too many requests in the last hour. Check [Rate limiting](#ratelimiting) for more information.  ## Additional links

API version: 1
Contact: hello@opensauced.pizza
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DbPRInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DbPRInsight{}

// DbPRInsight struct for DbPRInsight
type DbPRInsight struct {
	// Repository identifier
	Id float32 `json:"id"`
	// Selected interval in numerical days, goes back with number, 0 means today
	Interval float32 `json:"interval"`
	// Selected interval computed date in human readable format
	Day float32 `json:"day"`
	// PR Type: all requests count
	AllPrs float32 `json:"all_prs"`
	// PR Type: accepted requests count
	AcceptedPrs float32 `json:"accepted_prs"`
	// PR Type: spam requests count
	SpamPrs float32 `json:"spam_prs"`
}

// NewDbPRInsight instantiates a new DbPRInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbPRInsight(id float32, interval float32, day float32, allPrs float32, acceptedPrs float32, spamPrs float32) *DbPRInsight {
	this := DbPRInsight{}
	this.Id = id
	this.Interval = interval
	this.Day = day
	this.AllPrs = allPrs
	this.AcceptedPrs = acceptedPrs
	this.SpamPrs = spamPrs
	return &this
}

// NewDbPRInsightWithDefaults instantiates a new DbPRInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbPRInsightWithDefaults() *DbPRInsight {
	this := DbPRInsight{}
	var interval float32 = 0
	this.Interval = interval
	return &this
}

// GetId returns the Id field value
func (o *DbPRInsight) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DbPRInsight) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DbPRInsight) SetId(v float32) {
	o.Id = v
}

// GetInterval returns the Interval field value
func (o *DbPRInsight) GetInterval() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *DbPRInsight) GetIntervalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *DbPRInsight) SetInterval(v float32) {
	o.Interval = v
}

// GetDay returns the Day field value
func (o *DbPRInsight) GetDay() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *DbPRInsight) GetDayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *DbPRInsight) SetDay(v float32) {
	o.Day = v
}

// GetAllPrs returns the AllPrs field value
func (o *DbPRInsight) GetAllPrs() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AllPrs
}

// GetAllPrsOk returns a tuple with the AllPrs field value
// and a boolean to check if the value has been set.
func (o *DbPRInsight) GetAllPrsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllPrs, true
}

// SetAllPrs sets field value
func (o *DbPRInsight) SetAllPrs(v float32) {
	o.AllPrs = v
}

// GetAcceptedPrs returns the AcceptedPrs field value
func (o *DbPRInsight) GetAcceptedPrs() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AcceptedPrs
}

// GetAcceptedPrsOk returns a tuple with the AcceptedPrs field value
// and a boolean to check if the value has been set.
func (o *DbPRInsight) GetAcceptedPrsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptedPrs, true
}

// SetAcceptedPrs sets field value
func (o *DbPRInsight) SetAcceptedPrs(v float32) {
	o.AcceptedPrs = v
}

// GetSpamPrs returns the SpamPrs field value
func (o *DbPRInsight) GetSpamPrs() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SpamPrs
}

// GetSpamPrsOk returns a tuple with the SpamPrs field value
// and a boolean to check if the value has been set.
func (o *DbPRInsight) GetSpamPrsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpamPrs, true
}

// SetSpamPrs sets field value
func (o *DbPRInsight) SetSpamPrs(v float32) {
	o.SpamPrs = v
}

func (o DbPRInsight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DbPRInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["interval"] = o.Interval
	toSerialize["day"] = o.Day
	toSerialize["all_prs"] = o.AllPrs
	toSerialize["accepted_prs"] = o.AcceptedPrs
	toSerialize["spam_prs"] = o.SpamPrs
	return toSerialize, nil
}

type NullableDbPRInsight struct {
	value *DbPRInsight
	isSet bool
}

func (v NullableDbPRInsight) Get() *DbPRInsight {
	return v.value
}

func (v *NullableDbPRInsight) Set(val *DbPRInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableDbPRInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableDbPRInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbPRInsight(val *DbPRInsight) *NullableDbPRInsight {
	return &NullableDbPRInsight{value: val, isSet: true}
}

func (v NullableDbPRInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbPRInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


