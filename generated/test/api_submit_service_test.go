/*
@open-sauced/api.opensauced.pizza

Testing SubmitServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/open-sauced/go-api"
)

func Test_openapi_SubmitServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubmitServiceAPIService DownSubmitOneById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.SubmitServiceAPI.DownSubmitOneById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubmitServiceAPIService DownSubmitOneByOwnerAndRepo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var owner string
		var repo string

		resp, httpRes, err := apiClient.SubmitServiceAPI.DownSubmitOneByOwnerAndRepo(context.Background(), owner, repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubmitServiceAPIService FindAllUserSubmitted", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SubmitServiceAPI.FindAllUserSubmitted(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubmitServiceAPIService SubmitOneById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float32

		resp, httpRes, err := apiClient.SubmitServiceAPI.SubmitOneById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubmitServiceAPIService SubmitOneByOwnerAndRepo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var owner string
		var repo string

		resp, httpRes, err := apiClient.SubmitServiceAPI.SubmitOneByOwnerAndRepo(context.Background(), owner, repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
